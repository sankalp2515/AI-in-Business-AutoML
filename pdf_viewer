import os
import fitz
import PySimpleGUI as sg
import webbrowser as wb
from threading import Thread

DEF_PAD = sg.DEFAULT_ELEMENT_PADDING
LOGO = b'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'
CLOSE = b'iVBORw0KGgoAAAANSUhEUgAAACEAAAAhCAMAAABgOjJdAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFHUExURQAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAABQUFAAAAAAAAA8PDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBQAAAAUFBQAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgAAAAAAAAAAAAAAAAAAAAICAgAAAAICAgAAAAAAAAICAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAAAAAAAAEBARsYxhIAAABrdFJOUwABAQIDBAkLDA0NDhERFxgZHCEjJScoKSstLjAwMTI5Ojs8QkNDREpLTFhpbG5ydXd4e3x9fn6AgYKDhIWGhoeIiImkqLS2t72+v8DBw8TFxsfI09jZ2dze4OHi5ufo6evx9Pf4+fr7+/z9HaXqzQAAAAlwSFlzAAALEgAACxIB0t1+/AAAAa1JREFUOE91U+dfwjAQvVgUt7hAxQpCcePCXQduBbeiAiLuovX//+zlki6tL3CXXN7v3V2SAjAOsmIqYS1AMvjkFxRrQzg2MDbqwXiPI8KNor9+Gh6Y+444t6OvUz2RSBiHNN0Hl8Aoj8gCa/dtIrmN3StvluXvyf6oOqiqURzc9B1edwUkgRhLJtZRkyUQvs1Sr9AXjLW7WDI1ojlIJaY/VDdDLzTy5G4kjUHJIKsXmnEiz4gAWk1oyEr12yb0go6e/1NGlJYox61eaAIIrgzTQklPgAKazSBLjIajahwwMm+m0WmGN0uhBYMdZ5U4Jyxg0E8DXej8ITZLBB8NZCgM2nMv73Mi5GjYDOwVYMN8xlqw8X+yQOZrK1eJkZxvpZAxM9BxUUWKb6UAi0gApDzxpn0qhdbTRf46IZRfhTq/ShlrrafnC8EgnanPzdGcg8+1mtCwstDN1VFE4PfNrd80gofwp5eZSjtyPUiKXrBy0gg/5jez2ewODjLbO/re25BLg0HiuFwqulAqlk865R45BQ8ioATw5zK0Lyv9B65vjsP9jMXCEvEaC3aEwQ8SIlBGc1pXAwAAAABJRU5ErkJggg=='
FIRST_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAACYAAAAmCAMAAACf4xmcAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADzUExURQAAAAAAAAAAAFVVVQAAAEBAQDMzMwAAACsrKwAAAAAAACAgIAAAAAAAAAAAAAsLCwAAAAAAAAAAAAoKCgkJCQkJCQUFBQUFBQUFBQQEBAQEBAMDAwAAAAAAAAICAgcHBwQEBAICAgYGBgYGBggICAQEBAgICAICAgQEBAYGBgQEBAcHBwcHBwcHBwQEBAcHBwQEBAICAgAAAAICAgAAAAEBAQEBAQEBAQMDAwMDAwEBAQAAAAEBAQMDAwMDAwMDAwQEBAUFBQQEBAICAgEBAQQEBAEBAQICAgEBAQICAgEBAQICAgMDAwAAAAEBAQICAgMDA9UvN4kAAABNdFJOUwABAgMEBAUGBgcICAoVFhcYGRoaGxwwNjc6O1RaZmhydHV2hoeIiImJiouLjI2Ojo+lp6eos7S1tba6u7u7vL29x8jk7Ozt7v39/v7+Ym5s7wAAAAlwSFlzAAAOnAAADpwBB5RT3QAAASpJREFUOE/VkmdfwjAQh+MWnEHEjQNwD1zFOnDgQnoXvv+nMU2utcEkfavPq3/u9/yul/TY/6CyPErJx2rnfZ2ij6qAS4o+NhAuKMYUZ4comZgav3nbGqZsYGjlEPF5mg4GWY23Eb+2rV/NaOVQQP+sSCeTH423BUa7Y/owSKrJuYQ4mVT5N4nGHwVEdUevVJO9oH88oWsWtMafEKLaCNUsKG0xFCiOXHPFKO1QwGfd+voJSttD6B5490lppQBBNAtUsqGvMH+L0Nsfp5oFrbGFAACbeQ8in+QeoNdwzpdorNRCwFNXv1Rj/E7O18j79XK+Fsj7TtHJJKMx/iC9nby1lF6A+JK75IzNXX9surpdUYwpzFAYoIpwTtHHSud1jaKXypJ3g/4ojH0D+V82Si9hgoIAAAAASUVORK5CYII='
PRE_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfkBQkKKCyW+3RRAAACG0lEQVQ4y23Uy2tUZxgG8N85ZyZQ3GRlWrUGL6mmUnBRcOGi6NqVaGImamhd2GKhBReFUql/hKuKV3CpK0EEQdJ6qysXtWhVuixITaKmXjJzztvFfHOcCb6rw/c8z3v5vuc99KKQYdxxd70Wwmu/+9kmZArLosB6F3SEN/5wzTX3vRHazhtNjAH6AS+EGyaslIHMiEm3hAVT/ZICR4Wn9pDITc063T7/Ct/1JAUOCg+NodCQp1yFXEOBzR4LrZ5kzCvPbCJlbeCQmfTVPf3UgpfWdUueE/YN0KdVSpMDkgPCSRgXfkVe01tKHR0dE7Ukx22lMY6l7hqpw5ZSpVSqkqRI6IzwAze1rUYuR0uYMyuEWQvCRI2tFa6z6M/6cj/XFnY5LISv7Bbe2prQwl/mcyv8U0+wSsOXLhsGwy45bMhImqL01HCjfiqoHHEWHVDiFx8kPKRb+c+HMpUMV5WGLPWZZsgJOSqhMGI+d88nVqc6bVQDpqyEdkLX2Ohe7orCF/UUg/R3Jzl24EruIr5ZRo3+rmvZ1zou5R44Y7tpVZ8/82TvXjRVZmxz2hPYYNG88eSZbrc77UyTZZr4zAvPjfYebFp4ZHNt73eVuvbe4m9hsn8jvheemUrETFOzbmm/OeHb5Ts3ZUG4o+WjRM2tst9dYc5e79nqUWctCUsemDXroSXhrVM+Xk7vSjKM+clNi0J46Tc/2mDgN/M/ctKsO+x+mYQAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjAtMDUtMDlUMTA6NDA6NDQtMDc6MDD5MIYvAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIwLTA1LTA5VDEwOjQwOjQ0LTA3OjAwiG0+kwAAAABJRU5ErkJggg=='
NEXT_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QA/4ePzL8AAAAHdElNRQfkBQkKJCVDkoP5AAACC0lEQVQ4y23US2vUZxQG8N//MitX3Vhi1NCGYKIIfgZdFKGrXhIzSYwgiAsxYgsFsdSP0E2pofQK/RaCTJu0qesWGg240dJIjGPirZOZOV3MO38y0bN7z/M877m857z0rZBh1DW/2hbCM8uuG0OmsMcKHPKt/4SWVQ0Nf2sJLT8YSYwB+sc2hTtmHZCDzJC6FaFperekwCVh02zyZGpqsnSa9li40pcUmBLuO4ZCme6HXKnAuHvCTF8y4qktx1GTyTDspJMOIkMNE554ZrR3z6IwnwBKLAjh03TqITPCdzBqxwpVIiUuC+FqJeihS8J47gOlm7sEUiKqovuCr/Fh7jRuo1sBg9bzdNHQcTp3wpoHiFR0/hq9ltCH7jqRe8u6TiKecklrQNBy0XvI5cK/9vXv6+UbvnShetMS53y1K2ZQatqv0FFgXcuiDU3Q9L7vtf1TVTHkObeFwykok0JTQwgNm0K9wobtWOaz9GxlSmVSW1dHR1dHPXlL1IXPGdPxe9W+Mkna2oleVt36RZiAb4S5gdGY0tE1MzAaZ4Qfe7W/Y1vT0QHJvPMD9CMee2GsP951Yc14Nd5F2pP+eI9ZFc7u3ogFYcOZquO1FC3DRx4Jn+zduWlN4TdT3q6Gb79JS8KWOW/Y6hE/2RFe+cstt/zpldD2s3f30nuSDEd84Q8vhfDSHTdMGPhm/gcpEqbqeJ/q0QAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMC0wNS0wOVQxMDozNjozNy0wNzowMOY48G8AAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjAtMDUtMDlUMTA6MzY6MzctMDc6MDCXZUjTAAAAAElFTkSuQmCC'
LAST_PAGE = b'iVBORw0KGgoAAAANSUhEUgAAACYAAAAmCAMAAACf4xmcAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADzUExURQAAAAAAAAAAAFVVVQAAAEBAQDMzMwAAACsrKwAAAAAAACAgIAAAAAAAAAAAAAsLCwAAAAAAAAAAAAoKCgkJCQkJCQUFBQUFBQUFBQQEBAQEBAMDAwAAAAAAAAICAgcHBwQEBAICAgYGBgYGBggICAQEBAgICAICAgQEBAYGBgQEBAcHBwcHBwcHBwQEBAcHBwQEBAICAgAAAAICAgAAAAEBAQEBAQEBAQMDAwMDAwEBAQAAAAEBAQMDAwMDAwMDAwQEBAUFBQQEBAICAgEBAQQEBAEBAQICAgEBAQICAgEBAQICAgMDAwAAAAEBAQICAgMDA9UvN4kAAABNdFJOUwABAgMEBAUGBgcICAoVFhcYGRoaGxwwNjc6O1RaZmhydHV2hoeIiImJiouLjI2Ojo+lp6eos7S1tba6u7u7vL29x8jk7Ozt7v39/v7+Ym5s7wAAAAlwSFlzAAAOnAAADpwBB5RT3QAAARJJREFUOE/VlNdOA0EMRb3LLpuE0ELvLfQWWkJoAUJnbef/v4bZ4ERaJHt4Q5ynO9LRlWdGM/AvCWemJZksPLXnJFqcIC1L/MFwUULGOdKSxBzByuvFqGTHqaKVH4nq47LQtWCdEW/7nqbBUM15jQlZqRrEm59I19Kna5AcEVKj0s2GBpHrw5tun6VBUiPEejafqcHgjpvvasynQdHtl+oVnwbR7jvStlcLq2/Iez6tsM/EzSmPNrCRIt27IzG15KCD1Jx0ydLiaorc8h1v4ZD5u8vS4q2U+M539aXjDrJ06Vqw9kHU69K18gP15srQtHD1+bLfZcwWjJQkZahanjNk5TnnWHxpz0u0iGZ/9dX8NQBfZyY2SvOVIRAAAAAASUVORK5CYII='
SEARCH = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAdCAMAAACOj/wDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAGPUExg6AAAACEdFJOUwABAgMEBQYHCAkKCw0PERUWFxgZGh8gISIlJykqKy0uLzAxNDU3ODs9P0VISktNUlVXWFlaXV5fYGFkZmdoaWprbG1vcHFydYKFh4iQlpianJ2en6CipKapr7O1vL7AxMXHyszP0dPU1tna3N7f4eLj5OXm6Onq6+3u7/Dx8vX29/j8/jlSQ8oAAAAJcEhZcwAADpwAAA6cAQeUU90AAAFTSURBVDhPjdLlW8JQGMbhYwcigo2JCnZ3i2K3InZhizkTTPT5wz1uz6Xg+OD9Zb/3Pfuwa5v4h/SGCbd7sjGDYyjT2CVU1+NpXP2w7cn9u6K8yct+KZeUdwqcjJaYzbbhY+CsmGtV8gawYtHa5AG2UrRWtQNrBrZIXAV62FLcJh5tbCn/ATvxbCGsAawwVR48FTKFqPrACFM1CNQyhaj7RCdT1Qw0MYWo/sAQU9UH1DGFKHjBElM1h5ff50vYxq2VLeUo8CaxJSewHMcWMYuAi/3NuAtMG7U2TAE7qVpr7Argbcs2GjNb5H1wxnKvqfTJ3f3R4d0n4LvyH7Ryr8ma8ctjKTBr6QZeO7gn68D8+vqCMy9KFN0Ab2GvJVSlfIT3Lg46FddAMOS7hSv/Pu3loFMu/7dgPwcdx4U8dUVz+st+DlzlctApu3iuZ0bgqGFEJsQX/wFag00Z1L4AAAAASUVORK5CYII='
STOP = b'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'
SEARCH_DOWN = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAMAAAACJixMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACoUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzfSIYAAAA4dFJOUwACEhMVFhcYGRobHB0eHyAhIiQsLS4vMTQ2Nzqmqbu8wMHCw8XIyc3O0tPX2dzf4OHj5OXm5+rrVsYFQgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAJZJREFUKFN9ilkSgkAMBeMyCoiKgsKAC8rmjoDg/W/mMIkU8mFXJen3KgDQE9NBVrPtWoYW5mYu9uRyX2H+Yt6u0/oap9SSBWE9zks0I0lttBr7mSxIQYszhxScLNZIBXqUczSeRzoaooSFW1+3CBVZNKhB6Yn/V6BS0cAOlcfLI6PYgu3flT+m8MNw549IO/QHJH8A+ADnTgkm2RHu0QAAAABJRU5ErkJggg=='
SEARCH_UP = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAMAAAACJixMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACoUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzfSIYAAAA4dFJOUwACEhMVFhcYGRobHB0eHyAhIiQsLS4vMTQ2Nzqmqbu8wMHCw8XIyc3O0tPX2dzf4OHj5OXm5+rrVsYFQgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAJFJREFUKFONitsWQlAURbdKIUVRHLq401WI/v/POpc9GtFL82XNtfaGfxiPUAZMg8MEtccs6F5HGcsXctQSvwt/Lmr8JAB+G6s4IErSeCy9JlH4gOhpTf8ZpE51YQwtq1xUcKtMQ4VV/nBQKU6Zm8LWp7stTGCXBb8sLleLDx82t/OchrEb7ADb/ZKFxEsPCeANnKkJJnnspSYAAAAASUVORK5CYII='
DOTS = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAMAAAAWyLyOAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADeUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKk1tBUAAABJdFJOUwACAwQGBwgJCgwODxESExYaHB0eHyEiJCcwMjQ2ZGZnaXBzfoKGjZKTlJWXmZyhoqWtsby9wcPKztLU1dbk5enq6+zv8/T1+vuv/8AWAAAACXBIWXMAAA6cAAAOnAEHlFPdAAAAnUlEQVQoU4XNxxKCAAwE0EURG6CiKPaGDXsBFRs2lP//IRM5O+7pzW5mgj9JtJ1NUySkGrbdShOi9bXTSfIm9oMg8HuA1CUEZhwwn4Qh3+dv3Lk6ylvGrgJtz7jrNJYezKOB6rc71FB0Gb5BY2xJes8A2eJuogLTF2El8dPs3DtbGYI2unjjAkEdnK6LHG+AoCghIrIcCaWoQohfAT7YFxkhHQD05AAAAABJRU5ErkJggg=='
QUESTION = b'iVBORw0KGgoAAAANSUhEUgAAAB4AAAAdCAMAAACKeiw+AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFfUExURQAAAAAAAP///4CAgFVVVUBAQDMzMysrKyQkJCAgIBwcHBcXFxQUFBERERAQEA4ODg0NDQ0NDQsLCwoKCgkJCQkJCQkJCQgICAgICAgICAcHBwcHBwYGBgYGBgYGBgYGBgUFBQUFBQUFBQUFBQUFBQQEBAQEBAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAfm1ovwAAAB0dFJOUwABAQIDBAUGBwgJCw0PEBITFBcaHB0eHyEiIyUqKywtMDEyMzQ5QElMTk9RUlNWV2VoaW1uc3R1dnd4eXp7goOEi46TmJmam52eoKKjqKuys7S+xMbKy83R1dbX2Nna3+Dh4ubn6Orr7PHy8/T19/j5+vz+5IosfAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAh9JREFUOE9tUwtXUkEQ/tzdC6EYCEbQwx5oZWL5gDQ134RPSBF8lpoIBj4S5/+fvr1cOqeTc869Z+b7dmZnZ7+FNlobo+GPpJbLF83mRTk7HPF7cAeMQ1P+vvlz+WuV+ed+ZXEDzT9C4yce49nJeAgebZBYd7GzncLmZmHnzA3W4yxs+KnENxvvL7yPKkBFBxf2bbwVh6NhVDjPoJ7t9+FFenEx3Qdff7ZBKB9WBirwhW71UxAqs3cjcrOXUQhOVAnOBDTU60uRX58NMG1TaI1pwEzVRS5fanSuEFnzAQNHLVbkaADwrdFZDSDGgodJOJi9FfkYCn0QuZ1lmDwQuY5hVOQuxzNi8me1GFYqyqwNG+fuRMbAts9TdgQ8lLXHtqilUxxjHj9Y+5Gl7ZCevn03x94ylo4dinzHlchua/CECiwoUnpC2mBX5AoESl6yg4pljwfdGCV29W826d8bb1zWy7Z7x7x0S1cfthZ7e7PzylCbLooU2/4Q1+Yx5p3bmunp7e1pb5RjG6OIXYsccGqudXV3d7W89tQCq1zFmbvYtsh2y3PszFc6oV7xxupTxqK2tYrrONO8sQZvTLfueyLIhnEqcgqeKThZIzgTUG21NKxaMLK0NMLLTH711MJsB/EtBlZrCQ3oeFtrCcU6Vqnx+5Sa4G5WqezkP50fp12dU6n885U8u/eVaHQYvjD3jQ1ny7Vms1ZeTkUeQFlY6z/BLbYzfB6o5wAAAABJRU5ErkJggg=='
BLANK = b'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'
ERROR = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAdCAMAAACOj/wDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAIfUExjF7PQAAAC0dFJOUwABAgMEBQYJCgsMDQ4PEBETFBUWFxgZGhsdHh8gISIjJCUnKCkqKywtLjEyMzQ1Njc4OTo7PD0+P0BCQ0hJSktMTlRfYGFiY2VmaGlqa2xub3FydHd5ent9fn+AgYKGh4iNjo+QlJWXmJudnp+goaKjpaanqaqrrK2ur7CxsrS1vb7AwcLDxMbIycvNzs/R0tPU1dbX2Nrb3N3g5OXm5+jp6uvs7e7v8vP09fb3+Pn6+/z9/gNN9oAAAAAJcEhZcwAAC4gAAAuIAeWOKUkAAAIdSURBVDhPVZP5VxJRGIa/CENI1KJs0SSXoCjKBLOsaLXMVrPIFs0WKzdEzRbbzWyREgUpVExaBDJZ4v0Du3fmwsHnh/ne571n5pyZe4dSaHa2vPsB/BxprdCIKoX28DAQnpue/h4CRo7kilqitAdJd9dJa1mZpbZjLIG+LWKBUfUFE00bhdB6uxvj+4RQ5SQGzSJLmB7ha7Uciz+iWyfHFPntGC3hQX0XL9ZIVQarnuD+Sjarwr5KucnE7InUEGV34bqCWc5pJpzyxgJ2VVxBv5qK4h4TE2Vj3MUnbXiVeKBi0+hObKZa9PKObPP4UE5UMICFU/xJ5MAZcsQapEU6+hvD+tVOhC8sl/zs4gB9Dh6UMtGxXxhyInJZKWvNrJeCU9tlIToRAObtK4QZ/GEKfUt/x7xRYMoohPS+OM2l78xt+wPEnxYJNfhD5AraZNHciaL1fDL5eJ3s+2c91B2/KGVVy1/c0igbkOjPl4pziw/pOPp4VF6K4Z6WKMuOf+3ZvOlBPRXGvDt4toWdeXxm3VyoW8bmNndCT6oONPO3VhrEbmtNanZVNKGXTWvIb5HrTHZNRvhhUN/GS74PS9A9Q5t0CDe9h3OtVKXRdeKTXo4VXjzfLUcZ8yB8VpHJ4oL3RrEQKrw6gbE9QhglncC4s37vVmN1ncOdhKNULEjkHHgNRIIzM3MR4O0h9jWWoDFdexOIRgNDzWbxrxD9BzeioYdNQbSNAAAAAElFTkSuQmCC'
SPLASH_SCREEN = b'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'
FULL_SCREEN = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+gvaeTAAAAjklEQVRIieWTOxKAMAgFn3poS2PntSw8k6U24lCEBAgpHN8MZXb5TIC/JQHYesKvp8IlHB4uycG7TUJgdcboDrSC5GCp15Ugr6G0ItVNCO4VFCUc3lqvhN/gFOeyR2TNaF/RUrOTxCOowinJIZDemPKdn8yTO7z6oNpwSTg8J1HDJ4PgADAA2AGsptY+nRsEZ1PQdIl0CAAAAABJRU5ErkJggg=='
ORG_WIDTH = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAAyklEQVRYhe2X0QrCMAxFj36EFn9xfq6gfk19ySAPbZPUzvrQC2NQktyzsTYZLP2hNiAdUDdJ7abuQAaegyGS1MziUdUFeEjgG7gVYrJc3vWrqvmq1AxBRADC5h4IL0C3uQXhAfjavAVhAQwz36W/4P3eAtCxw3aSfhMWQOjJT5X1koGV25PD2ZG0tHSo1i7wSh+vnoOo1sq7NPUoLjUWC8Az1HSba6MaACMgWi3VO5B0Q1j9PDKShSE8w0R0KA1BTB/LYfKPydLP9QHFcZM9Koek4QAAAABJRU5ErkJggg=='
ZOOM = b'iVBORw0KGgoAAAANSUhEUgAAAB8AAAAfCAMAAAAocOYLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAGSUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMhDVHMAAACFdFJOUwABAgYICwwODxASExQVFhcZHR4hIyQlJicoKSorLS4vMDEyNDU4PD0/QkdISUpMTU5QUlVYWVpcYWZnaWprbHN0dXh6e32AgYaIjpCVlpmam5+io6Smp6ipqq2vsLO1t7q9w87P0NLT1dbY2drd3+Dl5+jr7e7v8PHy8/T19vj5+vv8/f53HW3GAAAACXBIWXMAAA6cAAAOnAEHlFPdAAABiklEQVQ4T63RVVcCURQF4GNgDSgWYostit2JgdijCCq2YIuNnSj7fzvMHMCY5Yt+T/vEWvfeGfoviZUdvZ3m1Bguv9H2ey6DwO32WA53vjCuB6AI7tVy75NcL3AyUW+qGd55w1kjdyN0Gwi40uWosd/hsECOUX0BzBe2tGeR0NiUZ33H1NdLJnhwmln77MmjFBFDtAJ/Nk8UVZeYoBZpLD3Sbae2J3QpA9YRRD0ZiuWsL6J8HyblHNYDlHIMyfDCyVHRCdSQkCLnBD0Z9iHKOcx8ixFqEJNC2TZAlisMyv2wNC92NM0vbj3F22AnEQ/lPGFjwGjusL2I9NbxCssN1uJ4wHJ2cTcQq+S6U1xUKzHKfIbX1db8dINl5hrYNGq4H9FwBDz6vPt+4Hzr/EBM5X5EwbRf+v3A/Vq1cRdYkh/zWWx296RTHCyLI82stLcocF+FziUtOLRcqUhekBYWlA+qSpgLHfHjklFah7Tg+uWIJKe0sPzLgm4e8Jm4UCO4j80c1WlLOPwB0QdC1l9iI1nFIQAAAABJRU5ErkJggg=='
NIGHT = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAABu0lEQVRYhe3WTY8MYRQF4AeJSFjORPRoaSRILMXGUtgwdCLxEb/BBPEr+Ae+9jLGdCSs/AwrCx8xEsEKC9NmRlu8t1MWXVXd1VUrfZLKTaVOvefUfSvvPczwv2PbFO+20cV5dOL+D9bwAS+wii9TORyBBTzEJgYl1yZWcKou8Yv4EYv38QTXcBS7MYe7/xjo4zGO1yG+hK1YeBkHR3CuhOhA+vJOHcKkL9+SWno7h3MGv6X/4GZdwqQ9H7Y9T3weX4OzVKc4PJK1PQ8PgvO0bvG21Pa+0XtO6lAfv3BgUoHtJc+72IEe3udwrmJncD7WbeBc1OcFnLNRe5OKj4M30t4eKeB8Ck6nCQM/Y/E9BZz14OyqIlC2BYMJ1qo0V8oMfI7aKuB8i7q3CQNvo54o4LyOerIJAy+jdgs4r6JeqmKgDPuxIR00h3I4rXi+rsJBNA6Gx+xKAef+GJzKaMmG0Z0czpyUfAZqnoRDXJCN4zwTp2Xj+FYTJm7IAskzHB7BuSwLJKvyB1hlLOK7LG4t4zqOSaflPO5pKJINsU/66TbUEEqnieULUlRblFrdDtE1vJNieU9KSjPMkIu/Z1h8nCMSyXMAAAAASUVORK5CYII='
DAY = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAABd0lEQVRYhe2WwUrDQBRFT9xaVzap+B0uhao/IBU/RBci7tT+THdK/YugVVCpC/2GanRb42JuSAhJM0kHtNILjwR6331vppP7BpZYcMSKxlhx1Mj/bMAHBkAwh34gDb9J8gDz/z4BnRLOrDPQUW4srdrwgUcJvACbNXKDTO4Y2GjSAJhVPEsoBDyJ94F74EsxAi7VtCdurNyy3avVRAhsA4dARLr1+fgADsQNXRRP4Kn4twpdAV1gVbEDXOu3KdBTjjMEpCs/mcE7FecdaLtsoE+68ioMxb1w2cCDRLsW3F1xR00KFR0sgE+9tyw01sSNKjQBeyuuM3CSw2eVk2/AKwiANz23LDQTzmuFZmEDZbjR88iCe5zLcQIfYzIx5lMrw5k4E2DdZQMexuGmKjDEnPaWYg+z4sSI9nFoRFkr7mFMpsyKJyruzIqLhlEbYzJ3mM8zAm6Bc8y2OxtG2XE85hfG8Z+4kFRdyapuxXNdyWywvJYvsfj4AUHvgJracDYiAAAAAElFTkSuQmCC'
WAIT = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAABV0lEQVRYhe2VO07DQBBAn00UFAk3VKGIuxwhRwCKVJSICokDUMIJMD2hJDkEJ6ChgpoCKpRQIKiQQBEQCi/yspn12rFJBPKTRrJ3dn47+4GKP0odOAZGwBCI1NjciICJIdE8ExgJCTzM4qjm0IfADjAG+sCzGp8Icz9nScAV/ImkwlsgUDqpBUeGvY+7wFQOhSDbSldXSQyxb8IL4A5YSguSluFYGHvTdAdKbNwDHxRozSrxsn9Xf8kvHDXPoQ+ALnHF58ir8j9pK1kIpyR975XkM1TipM300Su6EiHwqqRlKv2CzvMg3Z4iPZLqT0oK3kKoPo2FbsIKnS5wA1wDnZy268AW7tvWis/P5/gqh+2GZrfnCmLDA5a1/0aOBFa078A6KwO7wAvwCGwaujVgoKRp6Dziyvcp4QWtIfdxQLLM/SLOXbxnmJP5liuTJnHlZ0y3oKIiM18SzVYmCM6giAAAAABJRU5ErkJggg=='

NEXT_PAGE_N = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFiUExURQAAAP///////6qqqr+/v8zMzNXV1dHR0dPT08zMzM7OztDQ0NHR0crKyszMzM7OztHR0cvLy8zMzM/Pz8vLy8zMzM3Nzc7OztDQ0MzMzM/Pz87Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7OzszMzM3Nzc3Nzc7Ozs7OzszMzM3Nzc3Nzc7Ozs7OzszMzM3Nzc7Ozs7Ozs3Nzc3NzczMzM3Nzc7OzszMzM3Nzc7Ozs7OzszMzM3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3NzZ4df2oAAAB1dFJOUwABAgMEBQYWFxkaGxwdHh8hIiMlJygpKistMDRCR0hMTlJUVVZXWFlaW1xdXl9gYmNmZ2psbm9wcnN0dXd6e3x9f4CZm52eoKGipby9vr/BwsPExcbHyMnK1NXW2Nna29zf6uzt7u/w8fLz9Pb3+Pn6+/z9/n7aq48AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGcSURBVChTNZLpQxMxEMVfkl1uLbS0oqAgtHQLggcIqCiKyg2FooAHgkopUIF2t+//d6YL+ZKZ98vM5k0WupxB8u3OBVndXUjBuKYoy+HO52vWDovFnzXWlhMi3OgjZR6MdVjAtAd7rORj4jDN8pgExveNbPkTzipxyPF3H5wnBYD1HNJHLChJnJ3fh28MOgcGumDgI3NaTcqhj5yQBB5myNeySVLgEpCs70G7eHhJzimQtMQ03nCymTUrXt2EBb7DJhNaYW+BxugKSygfOf2ia4lBi/UlNT+qYEln8GgGMcDUIJyVPgqsw0M+xxw5j0kOKdggTn85cfPgmo+fki8GWe9Xc9Jqi3dhLbKsFMlimYFmnfVdzIs/Tw5lw0YUNaJAQg8B3yMVfdXrekLCUHQxYrHNDPCJ4/FIclGjoLqPUa6Iz+6Lyr2YTDyL9d6Tfykde8DjtI5d30DHnjrkE72ZE2d/R6UUvtQZDP8Rn6IryVf4Jdcmz2dasyWej8e6ksRqnVff19e/XTFc67nVhRj0fti/JC8PFjPN3wf4D5n4UV8VfxHCAAAAAElFTkSuQmCC'
NIGHT_N = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAD8UExURQAAAL+/v8bGxtHR0dXV1czMzM7OztHR0dPT08zMzM7OztDQ0NHR0crKyszMzM/Pz9HR0cvLy8zMzNDQ0MvLy8zMzNDQ0M/Pz83Nzc7Ozs3Nzc3Nzc7OzszMzM3Nzc7Ozs7OzszMzM3Nzc7Ozs3Nzc3Nzc7OzszMzM3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs7Ozs7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3NzUtmv5AAAABTdFJOUwAICQsMFBUWFxkaGxwdHiAhIiMmJygrOkJETE1OVVZYWVpnaWtsbW9wcXJziYqZmpucnaanqKqrrK2us7W2t9XW19nj5Onq8fLz9Pf4+fr7/P3+4dqHvwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAARBJREFUOE/NktlSAjEQRaMCKiPivoIbDooLroyjsikuQQnMcP//XxzSAZyu8M55OnXTVZ2kW0wfGbf+9iMb1cKCCeI4twEMgb9twn/kJFTlcGMueQWo+y2TjimG8FYGcqDgZ3UUIxcGJS273f6ZljiOBJ2nvlDUwriDR3KDJ5I4mUDp/sJRv8taGC4qJBd4IGHUcERSR56E8Y51kg9YXhjRRoKkgxkShhwXzJIwRi1aE1qMLlmbcMnT4TNLeCRhLPXUqpa06lg/Kvphn6Q8FEZa4lJL8hO2YQqxHwZUsdPtn2vhuCGe1waSV3ihyTH2vqG8481E6tq+ckIslntmZ+1LG+EUqs22bLyezJtgChDiDzgbLDDSRSCqAAAAAElFTkSuQmCC'
ORG_WIDTH_N = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAkUExURQAAANHR0dPT08rKys7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzd/BqxEAAAALdFJOUwAWFxgaa2zU19jZthbcPwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAJRJREFUOE/Nk1EOgCAMQ1FU0N3/viKsgwGGD6OxH6auDwNsmo+0WjZKdmVjNvIdwnra2E6OjuUyRPk5O9pj8RKIAlC5EBmochACNDkTADp53LQHEGznWOEbANr1oZbUvLC4cg/8Qbyrh6cI9ytA6r7W6KpjfwBgPgql/gGQCRJxfwWoCfQ/A5pAXgKKGI798Md5VcacgoIJdXsu00AAAAAASUVORK5CYII='
QUESTION_N = b'iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAMAAABhTZc9AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAHLUExURQAAAP///4CAgP///6qqqv///////9vb28bGxuPj48zMzNHR0dXV1cTExNjY2N3d3b+/v8PDw9LS0sbGxtXV1czMzMbGxtPT08zMzM7OztLS0tPT08bGxs3Nzc/Pz9HR0czMzNDQ0MvLy8/Pz9XV1dDQ0NHR0dHR0c3NzdLS0s/Pz9PT08/Pz9TU1NHR0dLS0s7Ozs/Pz8zMzMzMzM7Ozs/Pz8/Pz87Ozs/Pz83Nzc3Nzc/Pz83Nzc3NzczMzNDQ0M/Pz83Nzc/Pz83NzczMzM7Ozs7OzszMzM/Pz87Ozs3Nzc3NzdDQ0M7OzszMzM7Ozs/Pz87Ozs7Ozs7Ozs/Pz87Ozs3Nzc7Ozs/Pz83Nzc7Ozs/Pz87Ozs7Ozs3Nzc/Pz83Nzc7Ozs7Ozs7Ozs3Nzc/Pz87Ozs/Pz87Ozs3Nzc7Ozs7Ozs7Ozs3Nzc/Pz87Ozs3NzczMzM7Ozs3Nzc7Ozs7Ozs3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs7Ozs/Pz87Ozs/Pz83Nzc3Nzc7Ozs3Nzc7Ozs3Nzc7Ozs7Ozs7Ozs7Ozs7Ozs/Pz87Ozs7Ozs/Pz9DQ0NHR0dLS0tPT09TU1NXV1dbW1tjY2NLptt0AAACPdFJOUwABAgIDAwQHCQkKCwwNDQ8QERESEhkbHR4fIiMkJCUnKCssMDAxMjc4OTo6Ozs9Pj9AQUZJSktOVVZXWltcX2Fla2tsbW1zdHR4enuBgoODhoeIkpmdnqGjpKeqrK2vtLe3uLy9vr/AwcPExsrOztXW2dna2tvg4OHh4ubo6e3t7u7x9fX29vf3+Pn6/f3+1nG5cwAAAAlwSFlzAAAOnAAADpwBB5RT3QAAAl1JREFUOE9tU+lf00AQnWWbUGiNCtZaQIsiiHiCCCIW5RLFSq2KFIFyVEXrgYBVUA6BFqTSzCYR4c91Nokf9Md82Ozu28m8ffMWuMK5ojDmDXclMzk9l0n2hL2MObugqBTMdzWRE+iEyCau+JjcVoDLIRRfM1xMhrEWD8k0ifKiukmLUrbnUqPPR1Nz2/QTa7KWcUIVlde8MVFsvbxX7wcA/7m+V1sCzXQNUzkoLDhlIn7pD4F2Pfok2nwIQv2LiOZUkCnAtLiF+kybByoHl3ShLw1WAm+b0dF6pHHgl/KIn9sBQiNCshZiJATQvoCYb/CAljBEbgDA27nu0DbWO70AAzlhDPvh5E8svK4ACCatvRdnSk6n9qxkEKBiuoD5KugWYjMGKhx/9v3bfeI8tP/rXZjWsU0hemFM4HwTyJvbwRL7u29PEdo0j2IMMqinywil4Ifrm29/2BVDAULL0zp+giwWJhyxVbi2SJqZSze4lGmigFnQcWfcSVWhwxBoZGNH5RrGd1D/J7fDMIz3d2zQzZV1y51kiZpdYDfPrUucZxtdtHVld6XVnTfOSs69zn1lKKWBYKDUrRL7IUQ3VOWxMF3hwMXaEa3Ynv3Vyj9s6yyLQcvy7+UWeZDBQ9I5oQG/QD1auCVhYmUaHYQyiFCPts97gLv95aRPRDf1CH35zY92f8mTjjcWyRtQHX0arQY48eCr4w3qvspq0rav+i4eozaUNdx1fHVWykmeZLUHeLKuyPEkDf/7efWx7WfypLwe810+6C1wYIqicPsd9SQzG/pGJtkVLiGytMv5Hyw12VtjAX40AAAAAElFTkSuQmCC'
SEARCH_UP_N = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAMAAAACJixMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACoUExURQAAAP///8bGxsnJyc7OztHR0dPT08rKyszMzM7OztDQ0NHR0crKyszMzM7Ozs/Pz9HR0cvLy83NzcvLy8zMzM3Nzc7OzsvLy87OzsvLy8zMzM/Pz87Ozs3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc3NzamMdWsAAAA4dFJOUwACEhMVFhcYGRobHB0eHyAhIiQsLS4vMTQ2Nzqmqbu8wMHCw8XIyc3O0tPX2dzf4OHj5OXm5+rrVsYFQgAAAAlwSFlzAAAOnAAADpwBB5RT3QAAAJFJREFUKFONitsWQlAURbdKIUVRHLq401WI/v/POpc9GtFL82XNtfaGfxiPUAZMg8MEtccs6F5HGcsXctQSvwt/Lmr8JAB+G6s4IErSeCy9JlH4gOhpTf8ZpE51YQwtq1xUcKtMQ4VV/nBQKU6Zm8LWp7stTGCXBb8sLleLDx82t/OchrEb7ADb/ZKFxEsPCeANnKkJJnnspSYAAAAASUVORK5CYII='
PRE_PAGE_N = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFiUExURQAAAP///////6qqqr+/v8zMzNXV1dHR0dPT08zMzM7OztDQ0NHR0crKyszMzM7OztHR0cvLy8zMzM/Pz8vLy8zMzM3Nzc7OztDQ0MzMzM/Pz87Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7OzszMzM3Nzc3Nzc7Ozs7OzszMzM3Nzc3Nzc7Ozs7OzszMzM3Nzc7Ozs7Ozs3Nzc3NzczMzM3Nzc7OzszMzM3Nzc7Ozs7OzszMzM3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3NzZ4df2oAAAB1dFJOUwABAgMEBQYWFxkaGxwdHh8hIiMlJygpKistMDRCR0hMTlJUVVZXWFlaW1xdXl9gYmNmZ2psbm9wcnN0dXd6e3x9f4CZm52eoKGipby9vr/BwsPExcbHyMnK1NXW2Nna29zf6uzt7u/w8fLz9Pb3+Pn6+/z9/n7aq48AAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGfSURBVChTNZILV9NAEIXv7iagghZbWlBBQFua8hJREBVFefgCrJaHKCCClArl0Sa9/9+ZBPYkOXPvtzNnZrPQ5QxyC9vn5PmP990wLjZlOdz9EvLi58rKrws2P6fEuPJHT1jJtxvA3ChssFZMiMNLHj6C2L6vevgvZ5Q4jHEvA+dZFdZzyP5hoCRzdtQN2ethclw+EvbUTrsk9ROHE7/UigoJGeUSkOM3WPWDKAzDvBKLzSiDd1LQk5JB1IqilhAncpxzWG92wFoErJbJco15VXf4FfUd7exBkwNT5JMhXt4X6X4fg6uQRgc5gTlyFk/ZL02jQnBNwcAzyJwyGWYe6tEJqO8Ymdq3bQloc75It19FJezUdq2XAE9jpKTOW5a0d3kTEIcTfI0sK5ohapacjoHFVjMNfJCU+EheXWX4Mt+i8HT9OCfCoLOvrwPG+Lh38i+lw5W4n9Vjl03Sg0PvAQtiy/OCR0Uxje/L38JIlc/VV1KscSu4Ka69NbLN6uPEV5L62GBjt1zea/By+fa1L8QgM79eJ0+/v0nH1wf4DyoqUV9FZhjhAAAAAElFTkSuQmCC'
ZOOM_N = b'iVBORw0KGgoAAAANSUhEUgAAAB8AAAAfCAMAAAAocOYLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAGSUExURQAAAP///////9XV1b+/v9HR0dXV1cjIyMzMzM/Pz8bGxsnJyczMzM7OztHR0dPT08zMzMrKyszMzNHR0czMzM3Nzc/Pz9DQ0MvLy8zMzM3Nzc7OztDQ0MzMzM3Nzc7Ozs/Pz8vLy8zMzM7Ozs/Pz83NzczMzM3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs/Pz83Nzc3Nzc7OzszMzM3NzczMzM7Ozs7OzszMzM3Nzc3Nzc3Nzc3Nzc7OzszMzM3Nzc3Nzc7OzszMzM3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc7Ozs7OzszMzM3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc2j3KcAAACFdFJOUwABAgYICwwODxASExQVFhcZHR4hIyQlJicoKSorLS4vMDEyNDU4PD0/QkdISUpMTU5QUlVYWVpcYWZnaWprbHN0dXh6e32AgYaIjpCVlpmam5+io6Smp6ipqq2vsLO1t7q9w87P0NLT1dbY2drd3+Dl5+jr7e7v8PHy8/T19vj5+vv8/f53HW3GAAAACXBIWXMAAA50AAAOdAFrJLPWAAABiklEQVQ4T63RVVcCURQF4GNgDSgWYostit2JgdijCCq2YIuNnSj7fzvMHMCY5Yt+T/vEWvfeGfoviZUdvZ3m1Bguv9H2ey6DwO32WA53vjCuB6AI7tVy75NcL3AyUW+qGd55w1kjdyN0Gwi40uWosd/hsECOUX0BzBe2tGeR0NiUZ33H1NdLJnhwmln77MmjFBFDtAJ/Nk8UVZeYoBZpLD3Sbae2J3QpA9YRRD0ZiuWsL6J8HyblHNYDlHIMyfDCyVHRCdSQkCLnBD0Z9iHKOcx8ixFqEJNC2TZAlisMyv2wNC92NM0vbj3F22AnEQ/lPGFjwGjusL2I9NbxCssN1uJ4wHJ2cTcQq+S6U1xUKzHKfIbX1db8dINl5hrYNGq4H9FwBDz6vPt+4Hzr/EBM5X5EwbRf+v3A/Vq1cRdYkh/zWWx296RTHCyLI82stLcocF+FziUtOLRcqUhekBYWlA+qSpgLHfHjklFah7Tg+uWIJKe0sPzLgm4e8Jm4UCO4j80c1WlLOPwB0QdC1l9iI1nFIQAAAABJRU5ErkJggg=='
CLOSE_N = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAHaUExURQAAAAAAAP///4CAgP///6qqqv///7+/v8zMzP///9XV1dvb27+/v8zMzNHR0dXV1cTExNjY2MjIyMzMzM/Pz9/f39LS0sbGxtXV1czMzNHR0cjIyNPT07+/v8LCws7OztDQ0MrKys/Pz8nJydHR0djY2MvLy8zMzM3NzcjIyM/Pz8nJycvLy9HR0czMzNLS0s7OztDQ0MjIyMzMzM3Nzc7Ozs7Ozs7OztHR0c7OzsvLy8zMzM3Nzc7OztHR0czMzM7OzsvLy87OztHR0c7OzszMzM/Pz8/Pz83NzdDQ0MzMzMvLy83NzcvLy83Nzc7Ozs3Nzc/Pz83Nzc7Ozs7Ozs7Ozs3Nzc/Pz8/Pz8zMzM7OzszMzM7Ozs3Nzc/Pz83Nzc/Pz83Nzc/Pz8zMzM3Nzc7Ozs3Nzc3NzczMzM7Ozs3Nzc3Nzc/Pz87Ozs3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs7Ozs3NzdTU1MzMzM3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc7OzszMzM7OzszMzM3Nzc7OzszMzM3Nzc3Nzc7Ozs7Ozs/Pz87Ozs3Nzc7Ozs3NzczMzM7Ozs3NzczMzM7Ozs3Nzc3Nzc7Ozs7OztHR0c7OztDQ0M3NzeTk5LfEyO4AAACddFJOUwABAQICAwMEBQUGBwgKCwwNDQ4PEBAREhIUFhcXGBkaGx0gISEhIiMkJSUmJycoKCoxODw9Pj9DQ0RFRkxOTlBTVFRYWVpaW1xmamxscXFydnl7fH1+f3+AgoKDhpWWmZmampydoqOpq6usra6xsrO2ubu8v8XG0NHR09XV1tbX19jZ3N/f4eHi4uPj5OXl5ufn6evt7/D09fX3+/z5sylfAAAACXBIWXMAAArrAAAK6wGCiw1aAAABwklEQVQ4T22ThV/CQBTHnxM7mYqBgYmF3R1gY3d3d2B3oWJ3/a9ebQzc7/a5Pd77vt/dbQyAwyIzDamEGBjAcQpbcQqaFgxUhdWVEulrMj1ZJyEgYvrrVaqX7wMta8UAeDQ95QVrNBFsaDTK/t0UIItQA+X4hhtzpILmnTSWIA4+ox8t5QaDHl94GIqnHmv9WJ0Ag5+n97cS3Z1f/ZQ6EncCKIfWw3W6VJ1VUQXPBicrwI+sosBGWoueAXjiR9ZQgNLoB20C3S11IAQDVHEuBPeP8cKA4CACkDVXjl4B8L0DUSAB8ESBpKWjEgfgO296AjHwbwmA+IX9oqD2625fsof/m+QgccY0sd2B6rKbRK8Y0o9/J71RRiHngOrebTubpiLMyjlw4NVlbs2YPSzBsdwpVH2WTh4SFk8qXOVPkbvVy6Pe+OX5WOlzsAKR+QH4TwLJ2f7yxyQwaxIByRLoTurkbr/E2ArrFmS3hM+ACZE2ir4mp0APBzs4lb0N1xuNxkZhNDb0v1c5iw7Iom7PYr60ynzxcJZD90QJhXtQqDpEjS461CFhwe64QDdJ7/aiXyerI7GPlYjELEHXEScmMcHBH+preAAp1WArAAAAAElFTkSuQmCC'
DAY_N = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACiUExURQAAAP///9HR0dXV1cTExMjIyMnJyczMzM7OztHR0dPT08rKys7OzszMzM7Ozs/Pz8zMzM3Nzc/Pz83Nzc3Nzc7Ozs3Nzc7OzszMzM3Nzc7Ozs7OzszMzM3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc3NzaP+H90AAAA1dFJOUwABCwwNDhMUFRYXGBo8P0BBQk9RUlR1d3mAgYKDqK+wsrPKzM3Oz9DT1NXX2O/w8fLz9P3+BnzlYgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAPlJREFUOE+9kmlTwjAQhjdUIalyg8hRjnLIITRQ3///1+xkF02lyow6PJ+ebN7J7OyGbg8g8h2/DujIsJwDJtIsQoRN6EQC4QaRkzN6jddH8Qyzxu5BXAi3iJUZrU6n5VCrGFt+0COMq10LR9Kpxhf3RKr7hnGtVKpPkLaVFH2MxRNbD4cKW44RxmI0xUDM5wU1MWpgKca4zuiIQM50BytFht1+Bu6R5ALMCnUxamIh5jPERIxm6Iv56AQ9tmfsy2w5VCfFtBEEzRnSVsGgslG3D64z7FsFo3bLqgwWRzvvlwuWla179+O6r3+Ya1/ugy/Tu+TvgX+H6B2cmR/FZ8l2QQAAAABJRU5ErkJggg=='
DOTS_N = b'iVBORw0KGgoAAAANSUhEUgAAABsAAAAJCAMAAAD0FKf3AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAEIUExURQAAAAAAAP///7+/v8zMzKqqqtXV1ba2tr+/v9/f3+Pj47Ozs8zMzNXV1djY2MzMzM/Pz9LS0snJydfX18zMzM3NzdDQ0M3NzdHR0czMzM3Nzc7OzsrKys/Pz8zMzNHR0c/Pz8zMzM7Ozs/Pz8vLy8zMzMzMzM/Pz83Nzc7Ozs7Ozs3NzczMzM/Pz8zMzM7Ozs/Pz8zMzM3Nzc7Ozs3NzczMzM7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc7OzszMzM7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3NzczMzM3Nzc3Nzc7OzszMzM3NzczMzM3Nzc7Ozs/Pz9DQ0NPT09TU1PwcdYgAAABSdFJOUwABAQQFBgYHCAgJCgoMDQ8QERMTFCQmKSwtLi8wMDI9QEtOWl5qbW9wcnN2fX+Wl5mfo6apr7Cxt7u8vsPFx8jKzdna4OHr7e7v8PLy9fn7+/xHmM6wAAAACXBIWXMAAA50AAAOdAFrJLPWAAAArElEQVQYV33NxRbCUAxF0QvFrbi7u7u7a14L//8nvMIYMslZ2YPg/zjKs25SiWB1UYuoeSQ604pLuVjrMrFNGggMX/QahYHUmpHcsHLznRmxR8uky2xlkndZva55Z0QXP7fQlbi1bfr8USLpVDCYWw9utyg3sS8R2xWB2PxJz0UcyG0ZSQO78tDT2a9KRkBIjC+TpAbQFpeHnlelGASn+NmwuCzfEN3CN34M8Aa4ehugbFQnLQAAAABJRU5ErkJggg=='
SEARCH_DOWN_N = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAMAAAACJixMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACoUExURQAAAP///8bGxsnJyc7OztHR0dPT08rKyszMzM7OztDQ0NHR0crKyszMzM7Ozs/Pz9HR0cvLy83NzcvLy8zMzM3Nzc7OzsvLy87OzsvLy8zMzM/Pz87Ozs3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc3NzamMdWsAAAA4dFJOUwACEhMVFhcYGRobHB0eHyAhIiQsLS4vMTQ2Nzqmqbu8wMHCw8XIyc3O0tPX2dzf4OHj5OXm5+rrVsYFQgAAAAlwSFlzAAAOnAAADpwBB5RT3QAAAJZJREFUKFN9ilkSgkAMBeMyCoiKgsKAC8rmjoDg/W/mMIkU8mFXJen3KgDQE9NBVrPtWoYW5mYu9uRyX2H+Yt6u0/oap9SSBWE9zks0I0lttBr7mSxIQYszhxScLNZIBXqUczSeRzoaooSFW1+3CBVZNKhB6Yn/V6BS0cAOlcfLI6PYgu3flT+m8MNw549IO/QHJH8A+ADnTgkm2RHu0QAAAABJRU5ErkJggg=='
ERROR_N = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAdCAMAAACOj/wDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAIfUExURQAAAP///////6qqqr+/v8zMzNXV1cbGxszMzNHR0dXV1cTExMjIyMzMzM/Pz9LS0snJyczMzM7OztHR0dPT08rKyszMzM7OztDQ0MrKyszMzM7Ozs/Pz9HR0cvLy8zMzM3Nzc/Pz8vLy8zMzM3Nzc7OztDQ0MvLy8zMzM3NzcvLy8zMzM3Nzc7Ozs/Pz8vLy8zMzM3Nzc7Ozs/Pz8vLy8zMzM3Nzc7Ozs7Ozs/Pz83Nzc7Ozs3Nzc7Ozs/Pz8zMzM3Nzc7Ozs7OzszMzM3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc7Ozs7OzszMzM3Nzc3Nzc7OzszMzM3Nzc7OzszMzM7OzszMzM3Nzc3Nzc7OzszMzM3Nzc3Nzc7Ozs7Ozs7Ozs7OzszMzM7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc3Nzc7Ozs7Ozs3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3NzZ+xBXEAAAC0dFJOUwABAgMEBQYJCgsMDQ4PEBETFBUWFxgZGhsdHh8gISIjJCUnKCkqKywtLjEyMzQ1Njc4OTo7PD0+P0BCQ0hJSktMTlRfYGFiY2VmaGlqa2xub3FydHd5ent9fn+AgYKGh4iNjo+QlJWXmJudnp+goaKjpaanqaqrrK2ur7CxsrS1vb7AwcLDxMbIycvNzs/R0tPU1dbX2Nrb3N3g5OXm5+jp6uvs7e7v8vP09fb3+Pn6+/z9/gNN9oAAAAAJcEhZcwAAC2EAAAthAVt5K6YAAAIdSURBVDhPVZP5VxJRGIa/CENI1KJs0SSXoCjKBLOsaLXMVrPIFs0WKzdEzRbbzWyREgUpVExaBDJZ4v0Du3fmwsHnh/ne571n5pyZe4dSaHa2vPsB/BxprdCIKoX28DAQnpue/h4CRo7kilqitAdJd9dJa1mZpbZjLIG+LWKBUfUFE00bhdB6uxvj+4RQ5SQGzSJLmB7ha7Uciz+iWyfHFPntGC3hQX0XL9ZIVQarnuD+Sjarwr5KucnE7InUEGV34bqCWc5pJpzyxgJ2VVxBv5qK4h4TE2Vj3MUnbXiVeKBi0+hObKZa9PKObPP4UE5UMICFU/xJ5MAZcsQapEU6+hvD+tVOhC8sl/zs4gB9Dh6UMtGxXxhyInJZKWvNrJeCU9tlIToRAObtK4QZ/GEKfUt/x7xRYMoohPS+OM2l78xt+wPEnxYJNfhD5AraZNHciaL1fDL5eJ3s+2c91B2/KGVVy1/c0igbkOjPl4pziw/pOPp4VF6K4Z6WKMuOf+3ZvOlBPRXGvDt4toWdeXxm3VyoW8bmNndCT6oONPO3VhrEbmtNanZVNKGXTWvIb5HrTHZNRvhhUN/GS74PS9A9Q5t0CDe9h3OtVKXRdeKTXo4VXjzfLUcZ8yB8VpHJ4oL3RrEQKrw6gbE9QhglncC4s37vVmN1ncOdhKNULEjkHHgNRIIzM3MR4O0h9jWWoDFdexOIRgNDzWbxrxD9BzeioYdNQbSNAAAAAElFTkSuQmCC'
FIRST_PAGE_N = b'iVBORw0KGgoAAAANSUhEUgAAACUAAAAlCAMAAADyQNAxAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFQUExURQAAAP///////6qqqv///7+/v9/f38bGxs/Pz8PDw8nJyc7OzsXFxdHR0dPT08rKyszMzNbW1s7OztDQ0MjIyNHR0crKytPT08zMzNXV1c7Ozs/Pz9jY2MzMzNPT08rKys/Pz9HR0c3NzdHR0dLS0s3NzczMzM/Pz83Nzc7OzszMzM3NzczMzM7OzszMzM/Pz83Nzc7Ozs7Ozs/Pz83Nzc3Nzc/Pz83Nzc/Pz87OztDQ0M7Ozs/Pz9DQ0M3Nzc7Ozs3NzczMzM7OztDQ0M7Ozs3Nzc3Nzc7Ozs7OztDQ0M7OztPT083Nzc3Nzc/Pz9DQ0M7OzszMzM7Ozs7OztHR0dDQ0NHR0c/Pz9DQ0NDQ0M7Ozs/Pz9DQ0NDQ0NDQ0NHR0c/Pz9DQ0NHR0c7OztDQ0M/Pz87OztDQ0NLS0tPT09TU1NXV1dbW1tfX19jY2NnZ2VLzso0AAABndFJOUwABAgMDCAgJEBETFRYWFxgZGRobHBwdHR4eHyAhIzQ1NTc4ODk9S0tmaWpsbW1ub3CCg4aJioqLi4yMjY6Oj5KVl5eXmJmam7i4x8nR093e7O3t7vLz8/T09fb29vf4+Pn5+fr6/f5NF25AAAAACXBIWXMAAA50AAAOdAFrJLPWAAABR0lEQVQ4T8WUV1fCQBBGVxRFEFtUFMWCvfcSezTE3rBFEzFWNCzk/7+5sANuNJvwpPfpmzn3zORkN0H/ia8CghvB4YEqiHyqJ9Mng5D51G5ZlzOQ+QQ2rYsJyIS6eKfTfrvVoLwdxCCz2CxB0XOnPVCwsFbT3mPGmA1AxcJYEVk3tY0wLex8W0LiCWtiqJB/UrI6ZA2rq/WF5i+KVov8jNVlx3UEsNoTD/hqhTOpaEV3XrM3S7xJ1BqtEQ3zfJ47iVojsSPr47AbOk7krTH/YuozudAILQfoc0W2jay6xl9JLdQmafh6nTsNLCRIBr4TPd4XOUVJx7e8pSWrvHNEqFXWMvded4LcLyVlvsx53C+EmmU9d9YLBYvNQuHd9/0uyCzESk5BJoT6opUQWfLf4zRkPv7x9HE/ZBeCQ3EfRDfK+uf8DQh9AdYzRBAOmmSFAAAAAElFTkSuQmCC'
FULL_SCREEN_N = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAASUExURQAAAM7Ozs3Nzc3NzczMzM3NzT9AkhIAAAAFdFJOUwB3f4CIs84ioAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAGlJREFUKFOljlEOwCAIQ9kY97/ysFZGkCVL1g8rfVEqv6QXL0Vq1hLPW4L85Y0ZL1UNUJwE6TedCcGzx/fCw0jYJ2uSg1PSCTAIPIz5ILAFIi9155BFsKsH7Jb+XwJpcpA29zp7n+8SuQGN1gIjnNdI/gAAAABJRU5ErkJggg=='
LAST_PAGE_N = b'iVBORw0KGgoAAAANSUhEUgAAACUAAAAlCAMAAADyQNAxAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFNUExURQAAAP///////6qqqv///7+/v9/f38bGxs/Pz8PDw8nJyc7OzsXFxdHR0dPT08rKyszMzNbW1s7OztDQ0NHR0crKytPT08zMzNXV1c7Ozs/Pz9jY2MzMzNPT08rKys/Pz9HR0c3NzdHR0dLS0s3NzczMzM/Pz83Nzc7OzszMzM3NzczMzM7OzszMzM/Pz83Nzc7Ozs7Ozs/Pz83Nzc3Nzc/Pz83Nzc/Pz87OztDQ0M7Ozs/Pz9DQ0M3Nzc7Ozs3NzczMzM7OztDQ0M7Ozs3Nzc3Nzc7Ozs7OztDQ0M7OztPT083Nzc3Nzc/Pz9DQ0M7OzszMzM7Ozs7OztHR0dDQ0NHR0c/Pz9DQ0NDQ0M7Ozs/Pz9DQ0NDQ0NDQ0NHR0c/Pz9DQ0NHR0c7OztDQ0M/Pz87OztDQ0NLS0tPT09TU1NXV1dbW1tfX19jY2NnZ2bDy15gAAABmdFJOUwABAgMDCAgJEBETFRYWFxgZGRobHB0dHh4fICEjNDU1Nzg4OT1LS2ZpamxtbW5vcIKDhomKiouLjIyNjo6PkpWXl5eYmZqbuLjHydHT3d7s7e3u8vPz9PT19vb29/j4+fn5+vr9/odbm8YAAAAJcEhZcwAADnQAAA50AWsks9YAAAEySURBVDhPYxhEgJEJysAHmBRVuaBMPEDJO02LDcrGDfSC8uw4oWxkwCypwA1lAoFuYJ4tB5SNDKTdU514oWwGBu0A7Krk/XKjnYWgHJyqOAyTMmNdBaE8XKoYeG0is6KcRSAcnKoYuC2ishNchMFs3KoY+KzCsqMdxEBMPKoYeC0isuMdQKbhU8UgYB2SHeUgSkAV0NLwnHh7MQKqGASMAzNiTVg18atikPVMz/OSUcevis/IPzPegl0Drype09CcZEdJ/O7iMw/OjnERJxBeZuHZieBIwqOKzzI8O8pZAsTErYqoeOS1icqMdgbHIm5VHAbxWXFuhNKXnG9utCvEOiDApUrGI8WVH8rGrYpFSpEHygQCnK5HAfo48iMqUPFJ0yGct1mU1YgoJ4grc2gEGBgAqcNDLYh2O8YAAAAASUVORK5CYII='
WAIT_N = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACoUExURQAAAP///////6qqqr+/v9XV1cTExMbGxsrKyszMzMrKyszMzM/Pz8/Pz8/Pz8zMzM3NzczMzM3Nzc3Nzc7Ozs7Ozs3NzczMzM3Nzc3Nzc7OzszMzM7OzszMzM3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc7Ozs7Ozs7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc3Nzc3Nzc3NzbINTUAAAAA3dFJOUwABAgMEBg0SGBkdHiU1RUZHS1FSWFlhZHBxc3mHiImUlZaen6Clv8LHzc7W2Nzd5ebn6+309vd+ZLyRAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAA4ElEQVQ4T82Rx5LCMBBERTBJsOS8XgyYHEzu//+zHeEGF2DDhaJ4F73WjD1SSX0a62/j2RZDGDYEmyGMjWnYMtyiu520Up5p8Lh1g94Dq5Q/4ldyPOnvX+maSl1ZtucfcrJO+IULHdNQYRBG4xiNpFfA9Nn9VKpWfVp/RT5PiaAPONQArSnyvbnC/T/06ZSjRjUcrw3KAXrUgFxQf33It1BezgtUw0/l7i3i8twzulAEmlSSOAALulAF2tQLjcOuJEvWdTOyxJqth6dLnoe6wPAco5CGATWczHBgRnwVSv0DhkEVqSYbYpgAAAAASUVORK5CYII='
LOGO_N = b'iVBORw0KGgoAAAANSUhEUgAAACYAAAAmCAYAAACoPemuAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADpwAAA6cAQeUU90AAAaVSURBVFhHpZhraFdlHMenNi9kYgSRRWrZC6FeGFFCaYJBhoFmIkKKvjDNqERBJU1YgjcwhUoIdVoqRk600DAMYgZzTXefm8tFCFbSG9/WO+3zeXqe09k6//8298DX53f5/i7nuZyzvxVp3LlzZ5i4W9nZkexDQUwVkg0vAYl3IzsPSU6NJUcRBpPQOS/39Q9ILmoqT7xblCuc9H7l1FwpUiBEvVDO2VJc5neUk0sgq1uStH///spz586N6g9wR4REDOUiTl/U1tbeAzf/MJmcEmWNgKzb+vr6MU1NTa81NzevA+8VobGxcY2At6Curu5hoZzsRTER61paWuZbI/aQmnIeri2MvMMnaWhoGHf58uWnCO4myS2KtTC3gdYCXAHX4H7FfEIZvrbgR87ikNtjrlug2xrWou6IWL/X4mSrhjjsypUrUwg+RODXNoY8M5DKDFbnhY6Oji6hHM0lhzltjPkbaxEzBXNqrHArR9DMGwTdBs0EXW1tbX2EVRyLuhR8gG19xAawGcw2D/MhEeXZYBNI3PXGkmtJW1vbvebEdtUajNvWtHbsofdWOl+/fn00xJ3gNE+xjOBG7ZcuXXoI/SC621IHLqLXo7eADXKwHRRR3gha5MilsDFtcKvNFTmXrcF8mkZ3Wlu7vdhgWrHQGIf3PpKcAXtJUkXgWe1VVVX/PUXBMB7+YeIO19TUZDe0aKRcNHTWGtYCZ62tPfXSqzGW+UEC3MK1kD1nO6N9OvouEyXg+xBsp/m5crBlWwl3LvI2eRzwLMYc8KfLYd5pDexrrWlt7fZiT8qZAvk5iN6cBXDrWOKl+rHPR78IzufwPYl/xLdGDno1/LCV2vTJyfHPk9cc8yLfM1tnLfjt1raHrLGkuAUkXgS5E/IM5h7I4Ybpdy419BNzWPTHTVtpbmtQ07nT2vaQxSOExkhayVNuguBTvYTsyk3ksD6AvA3sxf4R2O2Mbw+2T5BfNw+6W1+trA1dX8YX2Dy728yJPgl0sIWzrWltfJX2Yk/mCcNbgeMYhM/Am8gXIIzkySaAz9FPgZMkqwEnlcEZkq40Hlu2ldqirybGJP4pc5mzp6dnFPYL2FZak/lYuplhpO4gjsNJrlaJuwg6nfeXGz4lsWEr+7uVjpTTGtaKD9JiD3l/GPGN/zuklwk4TsAeCcy+z44wH8Duu+pATj4CwgVhroaXttKDrS/PTzDX8ph7D/rxWPM3ezA+NOY/Hkicr5K4iz334Ney3Ct8emxL0L8AB3MFktyrMRHl1FjgRgSZOuZaam5yrECutaa17SF7Z9qYH26cmyD9APlZSL+ih/fNQAY5BrWVaVjDWtaMtTfHP4f+3UqSjYRwFLjMz0O6yQf5fvSpyN8yhwMckT/QZ5hXmYPZFUufpFXkyR9+L0wWB8w5Ff945Jux5hFsotIcYdDleAy1EN5nC5eBJp+cwMnYwrXHvwd9N75w9ZX18WZfaA78+dfFQvRP5eUQXhvEeK4+Nrc1rIVtmbXtwV7MEQbEJzD+AubEwl9G14BGfiuVo3lAw1o2DF6xB3sJDvcTg4fvVmdn50Q6/w7n1hs3boxh3gdqQf5TlBA+SSB9ksIhV9amT07k9gK1zLkv1tgaa06yB3sJZ8xbwCqtxuCfJRMhNKEvp8mRLPdKsB2bH+y+2Ap2kDR8xJHzjc3VFzn/izWnua1hLfiNvCoepX47/rfCzXSfUXzXHOVTMQ25mYP/jAUc8YYE9JWjXuGfx8SfEMrakr8U5DisRVwzjU6zB7A/3GyvJ536B91Gru8c5D8gLfLdwsGehf3FhPb29l6yHBLJ2UHcn8zCVZylL8/tK5tbjrWITS92/8D8yZ78yk9A6QTzwGJIfzNfAz9H+OMi6b3kqHtga0m8SihHW+BFfopJcUkOOg/yF00uRraHTntyG2YS3NXd3T3ZJXavcU6iyGTIjzmXkkkwhflJtuNxnnK0UNYWfYFfDtayprXNi95FPzN8+65mee/4ZHTuT6umBNRycgeotpF4XLKhTV/kZHHlEGtfsxd7qmCvn6apdzAW/TAtBDneZt7CqjQgW9x3kb8phbK2BrAlcgvzFOBdwUpOC7fSa1v0M74UeJBK30EUnY/sp8wfIuFvfmVt+uKv+QH9N4OwDxFuZbq6+Ws8UNmi/roRJBybh75ScQORM0NE+LN2MDBRfuRtyPl8ykkvK6fgZHAeiuyctw8J5VasnJz0InkwKJkvv2qFyPv7k50dpfwDlysq/gFCTIxXxFiLHgAAAABJRU5ErkJggg=='
SEARCH_N = b'iVBORw0KGgoAAAANSUhEUgAAABsAAAAdCAMAAABsU+d6AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAIrUExURQAAAAAAAP///4CAgP///6qqqv///7+/v////8zMzLa2ttvb28bGxszMzNHR0b+/v9XV1cTExMjIyMzMzM/Pz9LS0sbGxsnJydnZ2dPT08rKyszMzM7OztHR0crKytPT08zMzM7OzsnJydHR0cvLy8zMzM3NzcjIyMnJydDQ0M3Nzc7OzsvLy8/Pz9DQ0MzMzM3NzcvLy8zMzM7Ozs/Pz8rKys3Nzc7Ozs/Pz8zMzM3NzdHR0cvLy8/Pz8/Pz9DQ0M3Nzc3NzdDQ0M3NzczMzM7OzszMzM3NzcvLy8zMzM3Nzc/Pz83NzczMzM/Pz83Nzc/Pz83NzcvLy87OzszMzM/Pz83Nzc3NzczMzM7Ozs3Nzc3Nzc7OzszMzMzMzM7OzszMzM3Nzc7Ozs3NzczMzM3Nzc7Ozs3Nzc7Ozs7OzszMzM3Nzc3Nzc7Ozs3Nzc3NzczMzM7Ozs7Ozs3Nzc7Ozs7Ozs7Ozs3NzczMzM7Ozs3Nzc7Ozs7Ozs7Ozs3Nzc3Nzc3NzczMzM7Ozs3Nzc7Ozs3Nzc3Nzc7Ozs3Nzc7Ozs3Nzc7Ozs7Ozs3NzczMzM7Ozs3Nzc7Ozs3Nzc3NzczMzM7Ozs3Nzc7Ozs3Nzc7Ozs3Nzc7Ozs3Nzc3NzczMzM7Ozs3Nzc3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs3NzczMzM3Nzc3Nzc3Nzc3Nzc7Ozs3Nzc7Ozs/Pz9DQ0NHR0dPT09TU1NXV1dnZ2d3d3ajXrQ4AAACvdFJOUwABAQICAwMEBAUHBwkKCwwMDQ4PEBESExQXGBkaHB0dHh8hISIjJCUmJikqLDAxMjM2Nzk7P0JERUZHSElKS0xNUVFSVVhaW15fYWRnaGpxdHV2d3h5e4CDg4SFhouMjI2OkpSVmJianKCho6eqra+wsrW4uru/w8TExcbHycvMzc/P0NHT1dna2t3e4OLj4+Tk5ufo6Orq6+zu7vDx8vP09fb3+Pj5+fr7+/z9/v6Xluk/AAAACXBIWXMAAA50AAAOdAFrJLPWAAABqElEQVQ4T2MgCFg1vJOy04OMeaB8BGBUTZ29cf369RuWlZizQsWggMWsY+P6tXP7Zqxav3FOIB9UFAyYjCZsXFXpqS4hb5U1d/NSf26oOAiIV21aFM8LZjK5dm+baAlmggGL7+blaVA2A4PHlO2ZklA2AwNv+cZ2ZSgbyMvYMtkEymZg0Jm3MhnKBAG3yVt92KFsBtv1C72gTBAwbNwRxQ9lMzhvWOAIZYKAVvWORBEom8Fh/UIPKBMEDBp2RAtA2Qy6C1ckQJkg4DJhmx8nlM0gULuhVRrKZmDgTNk83RTKBvovYNOSeCibgcGxZ3uODJQNBFLNm+aHQp1t1bZtsi2ECQbMFrM2Liu0lhIU04+ftmlbriJUHAzYnKZu3LCyt6Vz/oaNM7pm9keKQyVAgFk3b/EGUPytqbcxqNuyKVYYKgEGnIZhOcX5cfaiDELZGzZsihGEiqMB2YL1GzZFoMQwAsgVrduwMRwz5YCBQun6DRvCuKA8NKBUtnbDumAOKA8NqFSs3bA6BB6sqECtZu2GSdpQDjrQbFrozgxlYwA9O3jKwAIYGAAo3HLBfL87ZgAAAABJRU5ErkJggg=='
STOP_N = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAMAAABF0y+mAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAKmUExURQAAAP///////6qqqqr//////7+/v///v////8zMzNXV1dvb2+Pj48zMzMzM5tHR0dXV1djY2Nvb293d3c/Pz8/f39/Pz9/f39LS0tXV1dfX19nZ2dvb29zc3NXV1dbW1tjY2NnZ2d3V1dbW1tfX19jY2Nra2tvb29fX19ra2tvV29vV1dbW1tjY2NnZ2dra2tbW1tfX19jY2NfX19nZ2dra2tnZ2drW2trW2tfX19jY2NfX19jY2NnZ2dnZ2dfX2trX19fX19vY2NjY2NjY2NnZ2dnW1tnW2djY2NjY2NnZ2dnZ2dfX19jY2NjY2NnZ2drX19rY2NjY2NnZ2drX19jY2NjY2NnZ2dnX19rX19rY2NnX19nX2dnZ2dnX2dnZ2dnX19nX2drY2NjY2NnX19nX19jY2NjY2NnX2djY2NjY2NjX2NnX19jY2NrY2NnX19nX2dnX19jW2NjY2NjY2NnX2dnX2djY2NnY2NjY2NjY2NnX19nX19jY2NjX2NnX2dnY2NjY2NjY2NjX19jY2NnX19nX19nX2djY2NjY2NjX19nX19nX2dfX19jY2NnY2NjY2NnY2NjY2NnX2dfW19nX19jY2NjX2NjY2NjX19jX2NjX19fX19nX19jY2NjY2NjX2NjX2NnX19nX19nY2NjY2NjY2NjX2NjY2NjY2NnY2NjY2NjY2NjX2NjY2NjX2NjY2NnX2dnX19nY2NjY2NjY2NjX2NjX2NnY2NnY2NjY2NjY2NjX2NjX2NnY2NnY2dnY2NnY2djY2NnY2NjY2NjY2NjY2NnX2dnY2NnX2NnY2NjX19jX2NjX2NjY2NjX2NnY2dnY2NnY2NjX19jX2NjX19jX2NjX19jX19jX19jX19jX2NjX19nY2NjY2NnY2NnY2drZ2X7uN+8AAADedFJOUwABAgMDAwQEBAUGBwkKCgsMDQ4PEBAQEBESExQVFhgZGhseHyAhIiMmKSorLC4vMDIzNDo8PkNERUdITE9QUVJSU1RVVldYWFtcXV5gYmNlZmhpa21vcHJzdHV4eHh5eXp6e32AgYKEhoiJi46Pj5KSlJaWl5manJydnqCho6WmqaqrrKytrq6wsbKzs7S1tbe3uLq7u7y9vb6/wMHBwsTFxsfIycrMzc3Pz9DR0tLT09TV1tfY2drc3d7f4OHi4uPj5OTl5ufo6erq6+zt7e7v8PHy8vPz9PX5+vr7/s7ZNYwAAAAJcEhZcwAACusAAArrAYKLDVoAAAIaSURBVDhPY0AA0ehJqYJQNgZIP9R9MQvKRgYK7r66UrOSGfrmM6h52whARSGAu+rCkTXOM2MZWucpzT56OoULKg4G+gcTTc809scztC4I3mpUvlsGKg4GOnsTRBYunhHD0Lq8oochf6s0VBwMeNa1C1Tv3BzF0LxhajlD52SEmzmMrIWnbOOOvX4lnKFp+6ZE9gWFcDtZI2/end93UcD2/v0whqajJ1xUt4dApRgYZE9N9Ny+7pqBwb0HoQzN9w4Ympy1gkoBJY8UMJRfveOnvvthKEPr/a1SHmcMoFIMDHwtMxh8rtwvlp4MlGy4v4Ihboc6VAoI/A8bym65v5TBb6MZg836UIaSubJQGSAwvBwANO64OKcEBwOTJLNgVxUvAwMjGzczSFJhWRmDx/ndMOUqK5MYGJgcN19sUwXyOHOWqzC4m0GkGBgM9ngwcAbfmhSytJ4fyHW9ZgERBwO97WGyqbdLJRkiDssDufr7oiDiYMCTs2vVzTR+BukJyySAXIHWXkmIBBjI+mXaMjHI1Z2zA3PjTmqBaRhgAqroOOPFCOaYn3cG0wigOO+YE5QpNr+GB8qEAM2NuyyhTAaGjOPKUBYYGO9fawxlAoHGrlyIBSDA4nBqjiaUDQaBN4KgLAaxuEtNClA2BDAnXSvSBjE47addyRYCiyEAp9vGY7PL82pXX1hkzQ0VQwKyzpWzlkzPt0AkLgYGAKpxnJDA/eP3AAAAAElFTkSuQmCC'

annot_indexes = [-1, -1, 0]
G_SIZE = (770, 590)


class PDFViewer:
    """
    This class represents an object of PDFViewer class
    """

    def __init__(self):
        """
        Constructor for PDFViewer class
        """
        self.document = None
        self.filename = ""
        self.mode = 1  # day,
        self.total_pages = 0
        self.pages = None
        self.full_width = False
        self.annotated_pages = []
        self.max_page_size = (1050, 700)
        self.drag = [0, 0]  # drag enabled, currently dragging
        self.perv_zoom_val = 0
        self.current_page = 0
        self.image_id = self.start_point = self.end_point = None, None, None
        self.searching = False
        self.image_data = [0, 0, 0]
        self.TOC_tree = sg.TreeData()
        self.win = self.create_reader_gui()  # window
        self.text_found_pages = []
        self.notes = {}
        self.scroll_page = False
        self.perv_img_size = [0, 0]
        self.custom_search_option = 'simple'

    def clear_window(self):
        """
        When closes a file everything in application resets
        :return: None
        """
        self.TOC_tree = sg.TreeData()
        self.win['-TOC_TREE-'](self.TOC_tree)
        self.win['-BTN_DOTS-'](['', ['Whole word', 'Case sensitive']])
        self.current_page = -1
        self.image_id = None
        self.update_cur_page()
        self.annotated_pages = []
        self.win['-IMAGE-'](data=BLANK)
        self.win['-TOTAL_PAGES-']("/ 0")
        self.win.TKroot.title('| PDFViewer')
        self.win['-MATCH_NUM_STATUS-']('0 / 0')
        self.win['-BTN_SEARCH-'](image_data=SEARCH if self.mode else SEARCH_N)
        self.win['-MATCH_NUM_STATUS-']('0 / 0')
        self.win['-FIND_TEXT-']('')
        annot_indexes, self.text_found_pages = 0, [-1, -1, 0]
        self.searching = False
        self.filename = ''
        self.image_data = [0, 0, 0]

    def fill_window(self):
        """
        Populates all widgets once a file is opened i.e table of contents, notes etc
        :return: None
        """
        try:
            self.document = fitz.open(self.filename)
        except Exception as ex:
            print(ex)
            self.show_popup("Sorry this file can't be opened.")
            return
        self.total_pages = len(self.document)
        self.current_page = 0
        self.update_cur_page()
        #self.load_notes()
        self.pages = [None] * self.total_pages
        self.annotated_pages = []
        self.image_data = self.get_page_data(self.current_page)
        self.TOC_tree = sg.TreeData()
        toc = self.document.get_toc()
        if toc:
            self.create_toc(toc, "", toc[0][0])

        # updating all elements
        self.win['-TOC_TREE-'](values=self.TOC_tree)
        self.update_image()
        self.update_cur_page()
        self.win['-TOTAL_PAGES-'](value="/ {}".format(self.total_pages))
        self.win.TKroot.title('{} | PDFViewer'.format(self.filename.split('/')[-1]))
        self.win['-ZOOM_VAL-']('100')

    @classmethod
    def get_filename(cls):
        """
        Show popup for selecting file
        :return: Path of selected file
        """
        filename = sg.PopupGetFile(
            "Choose file to preview",
            title="PDF Browser",
            text_color='black',
            background_color='lightgrey',
            file_types=(("PDF Files", "*.pdf"),),
            icon=LOGO,
            keep_on_top=True,
            button_color=('black', 'darkgrey')
        )
        return filename

    def create_image_btn(self, k, data, tooltip, padding=None, image_size=(None, None)):
        """
        Create an image button
        :param k: unique key for accessing button
        :param data: image data
        :param tooltip: Tooltip to show
        :param padding: Padding on a button
        :param image_size: size of the image
        :return: Button elemeny from PSG
        """
        return sg.Button("", k="-BTN_" + k,
                         image_data=data,
                         button_color=("lightgrey" if self.mode else "black", "lightgrey" if self.mode else "black"),
                         border_width=0,
                         tooltip=tooltip,
                         pad=padding,
                         image_size=image_size,
                         )

    def fit_toc_label(self, length, data):
        """
        Adjust heading in a way that it fits in table of content
        :param length: required length of chars to diaply in one line
        :param data: heading
        :return: Adjusted heading string
        """
        counter, text = 0, ""
        for txt in data.split():
            counter += len(txt) + 1
            if counter < length:
                text += txt + " "
            else:
                counter = 0
                text += '\n' + txt
        return text

    def create_toc(self, contents, parent, phead):
        """
        Table of contents extracted from PDF file is in form of nested list. This function converts that nested list
        in to a parent-child data structure, so that all heading and sub-heading can be associated
        :param contents: list of child
        :param parent: Parent heading of sub-heading
        :param phead: key of the parent heading
        :return: None
        """
        cons = iter(contents)
        for content in cons:
            i = contents.index(content)
            head, text = content[0], content[1]
            text = self.fit_toc_label(15, text)
            if head == phead:
                i += 1
                k = ''.join(text.split())
                self.TOC_tree.insert(parent, k, text, content[2])
            else:
                j = i
                while True:
                    j += 1
                    if j < len(contents) and contents[j][0] != phead:
                        next(cons, None)
                    else:
                        break
                self.create_toc(contents[i:j], k, head)

    def create_layout(self):
        """
        Create the COMPLETE GUI of the application. Interface is divided into rows, nested list containing elements
        is given to the Window() function of PSG. For more information on how its done kindly visit https://pysimplegui.readthedocs.io/en/latest/
        :return: Nest list containing elements
        """
        menu = [
            ['&File', ['&Open', '---', '&Close']],
            ['&Help', ['&About']],
        ]

        self.tree = sg.Tree(data=self.TOC_tree,
                            headings=['No#', ],
                            col0_width=27,
                            col_widths=[0],
                            select_mode='browse',
                            k='-TOC_TREE-',
                            num_rows=30,
                            enable_events=True,
                            font='Arial 9',
                            row_height=40,
                            tooltip="Table of contents",
                            header_font=('Courier 9'),
                            pad=(0, 0),
                            text_color='black' if self.mode else 'white',
                            background_color='lightgrey' if self.mode else 'black',
                            selected_row_colors='black on white',
                            )
        frame_contents = [
            [self.tree],
        ]

        column_content = [
            [
                sg.Frame(
                    "Table of Contents",
                    title_color="black" if self.mode else 'white',
                    size=(200, self.max_page_size[1]),
                    font="Courier 12",
                    layout=frame_contents,
                    relief=sg.RELIEF_RIDGE,
                    border_width=0,
                    k="-CONTENTS_FRAME-",
                    background_color='lightgrey' if self.mode else 'black',
                    pad=DEF_PAD,
                ),
            ]
        ]

        frame_main = [
            [
                sg.Frame(title="",
                         relief=sg.RELIEF_RIDGE,
                         element_justification='center',
                         layout=[
                             [
                                 self.create_image_btn("OPEN_FILE-", LOGO if self.mode else LOGO_N, 'Open file',
                                                       DEF_PAD),
                                 self.create_image_btn("CLOSE_FILE-", CLOSE if self.mode else CLOSE_N, 'Close file',
                                                       DEF_PAD),
                                 self.create_image_btn("MODE-", NIGHT if self.mode else DAY_N, "Day/Night mode"),

                                 sg.VerticalSeparator(pad=DEF_PAD),
                                 self.create_image_btn("WIDTH-", FULL_SCREEN if self.mode else FULL_SCREEN_N,
                                                       'Fill to width', DEF_PAD, (16, 16)),
                                 sg.In('', size=(5, 1),
                                       do_not_clear=True,
                                       tooltip="Zoom %",
                                       text_color="black" if self.mode else 'white',
                                       background_color="white" if self.mode else 'black',
                                       font="Courier 8",
                                       justification='center',
                                       k='-ZOOM_VAL-'
                                       ),
                                 self.create_image_btn("ZOOM_ICON-", ZOOM if self.mode else ZOOM_N, "Zoom In", DEF_PAD),

                                 sg.VerticalSeparator(pad=DEF_PAD),
                                 self.create_image_btn("FIRST_PAGE-", FIRST_PAGE if self.mode else FIRST_PAGE_N,
                                                       "First Page"),
                                 self.create_image_btn("PREVIOUS-", PRE_PAGE if self.mode else PRE_PAGE_N,
                                                       "Previous Page", DEF_PAD),
                                 sg.In(str(self.current_page), size=(3, 1),
                                       do_not_clear=True, k="-PAGE_NUMBER-",
                                       tooltip="Current Page",
                                       background_color="white" if self.mode else 'black',
                                       font="Courier 8",
                                       text_color="black" if self.mode else 'white',
                                       justification='center'),
                                 sg.T("/ {}".format(self.total_pages),
                                      font="Courier 11",
                                      background_color="lightgrey" if self.mode else 'black',
                                      text_color="black" if self.mode else 'white',
                                      tooltip="Total Pages",
                                      k="-TOTAL_PAGES-",
                                      pad=DEF_PAD,
                                      size=(6, 0),
                                      ),
                                 self.create_image_btn("NEXT-", NEXT_PAGE if self.mode else NEXT_PAGE_N, "Next Page"),
                                 self.create_image_btn("LAST_PAGE-", LAST_PAGE if self.mode else LAST_PAGE_N,
                                                       "Last Page"),
                                 sg.VerticalSeparator(pad=DEF_PAD),
                                 sg.Frame("", layout=[[
                                     self.create_image_btn("SEARCH-", SEARCH if self.mode else SEARCH_N, "Search",
                                                           DEF_PAD),
                                     sg.In("", size=(15, 1),
                                           do_not_clear=True,
                                           k="-FIND_TEXT-",
                                           tooltip="Search here",
                                           background_color="white" if self.mode else 'black',
                                           justification="center",
                                           text_color="black" if self.mode else 'white',
                                           enable_events=True,
                                           font="Courier 8",
                                           pad=DEF_PAD,
                                           ),

                                     sg.T("0 / 0",
                                          font="Courier 11",
                                          background_color="lightgrey" if self.mode else 'black',
                                          text_color="black" if self.mode else 'white',
                                          tooltip="Matches",
                                          k='-MATCH_NUM_STATUS-',
                                          auto_size_text=True,
                                          size=(6, 1),
                                          justification='center',
                                          pad=DEF_PAD
                                          )
                                 ],
                                     [
                                         sg.T("\t", background_color='lightgrey' if self.mode else 'black'),
                                         self.create_image_btn("DOWN_SEARCH-",
                                                               SEARCH_DOWN if self.mode else SEARCH_DOWN_N,
                                                               'Next match',
                                                               DEF_PAD),
                                         self.create_image_btn("UP_SEARCH-", SEARCH_UP if self.mode else SEARCH_UP_N,
                                                               'Previous match', DEF_PAD),
                                         sg.BMenu('', ['', ['Whole word', 'Case sensitive']],
                                                  k='-BTN_DOTS-',
                                                  tooltip='Advance search',
                                                  pad=DEF_PAD,
                                                  image_data=DOTS if self.mode else DOTS_N,
                                                  border_width=0,
                                                  button_color=('lightgrey' if self.mode else "black",
                                                                'lightgrey' if self.mode else "black"),
                                                  ),
                                     ]
                                 ],
                                          background_color='lightgrey' if self.mode else 'black',
                                          border_width=0,
                                          ),
                             ]
                         ],
                         border_width=0,
                         background_color='lightgrey' if self.mode else 'black',
                         k="-TOOLS_FRAME-",
                         )],
            [sg.HorizontalSeparator(pad=((5, 5), (0, 3)))],
            [
                sg.Col(
                    layout=[
                        [
                            sg.Col(
                                layout=[[]],
                                size=(770, 0),
                                background_color='grey55' if self.mode else 'black',
                                justification='center'
                            ),
                        ],
                        [
                            sg.Image(
                                data=BLANK,
                                k="-IMAGE-",
                                pad=DEF_PAD,
                                enable_events=False,
                                background_color='grey55' if self.mode else 'black',

                            )
                        ],
                    ],
                    size=(800, 600),
                    scrollable=True,
                    element_justification='center',
                    background_color='grey55' if self.mode else 'black',
                    justification='center',
                    key='-PAGE-CLM-'
                )
            ]
        ]

        main_col = [
            [sg.Col(frame_main, scrollable=False, justification='center', element_justification='center')]
        ]

        notes_frame = [
            [sg.T('Page # 0',
                  k='-NOTE_PAGENUMBER-',
                  background_color='lightgrey' if self.mode else 'black',
                  text_color='black' if self.mode else 'white',
                  font="Courier 15 bold",
                  size=(12, 1))
             ],
            [sg.Multiline("",
                          size=(40, 30),
                          text_color='black' if self.mode else 'white',
                          k='-NOTE_TEXT-',
                          pad=DEF_PAD,
                          font="Helvetica 13",
                          background_color='white' if self.mode else 'black',
                          autoscroll=True,
                          tooltip='Write note'
                          ),
             ],
            [sg.CB('Save this note',
                   font="Helvetica 13 bold",
                   k="-SAVE_NOTE-",
                   text_color='black' if self.mode else 'white',
                   background_color='lightgrey' if self.mode else 'black',
                   default=True,
                   enable_events=True
                   ),
             ]
        ]

        return [
            [
                sg.Menu(menu, k="-MENU-"),
                sg.Col(column_content, scrollable=False, k="check"),
                sg.VerticalSeparator(pad=DEF_PAD),
                sg.Frame(title="", layout=main_col,
                         background_color="lightgrey",
                         relief=sg.RELIEF_RAISED, k='-FRAME_MAIN-'),
                # sg.VerticalSeparator(pad=DEF_PAD),
                # sg.Frame(
                #     "Notes",
                #     title_color="black" if self.mode else 'white',
                #     size=(200, self.max_page_size[1]),
                #     font="Helvetica 20 bold",
                #     layout=notes_frame,
                #     relief=sg.RELIEF_RIDGE,
                #     border_width=4,
                #     k="-NOTES_FRAME-",
                #     background_color="lightgrey" if self.mode else 'black',
                #     pad=DEF_PAD,
                #     element_justification='c',
                # ),
            ],
        ]

    def create_reader_gui(self):
        """
        Wrapper function for creating GUI and binding some events
        :return: Creted window
        """
        window = self.initialize_gui()
        window['-FRAME_MAIN-'].bind('<Enter>', 'START-')
        window['-FRAME_MAIN-'].bind('<Leave>', 'STOP-')
        window['-BTN_DOTS-'](['', ['Whole word ✔', 'Case sensitive']])
        window['-BTN_DOTS-'](['', ['Whole word', 'Case sensitive']])
        return window

    def initialize_gui(self):
        """
        Initializes the GUI and set all settings
        :return: GUI window
        """
        # To add a spsh screen just uncomment this code
        # if self.mode:
        # sg.Window('', [[sg.Image(data=SPLASH_SCREEN)]], transparent_color=sg.theme_background_color(), no_titlebar=True, keep_on_top=True).read(timeout=1000, close=True)

        title = "{} | PDFViewer".format(self.filename, self.total_pages)
        sg.DEFAULT_TOOLTIP_TIME = 10
        if self.mode:
            sg.theme('darkgrey4')
            sg.theme_background_color('lightgrey')
        else:
            sg.theme('DarkGrey6')
            sg.theme_background_color('black')
        window = sg.Window(
            title,
            return_keyboard_events=True,
            location=(0, 0),
            use_default_focus=False,
            layout=self.create_layout(),
            resizable=False,
            size=self.max_page_size,
            finalize=True,
            icon=LOGO,
            element_padding=(0, 0),
        )
        for k in window.AllKeysDict:
            if "BTN" in str(k):
                window[k].Widget.config(activebackground='darkgrey')
        #window.Maximize()
        return window

    def get_page_data(self, required_page, annotation=False):
        """
        Get PNG of given page number from PDF
        :param required_page: Page number to get image
        :param annotation: weather user is searching for some text or not
        :return: PNG image
        """
        self.perv_img_size = [self.image_data[1], self.image_data[2]]
        page = self.annotated_pages[required_page] if annotation else self.pages[required_page]
        if not page:
            if annotation:
                page = self.annotated_pages[required_page] = self.document[required_page].get_displaylist()
            else:
                page = self.pages[required_page] = self.document[required_page].get_displaylist()
        size = page.rect
        if self.full_width:
            mat = self.max_page_size[0] / size.width
        else:
            try:
                mat = (0.8125 * float(self.win['-ZOOM_VAL-'].get())) / 100
            except ValueError as error:
                mat = self.max_page_size[1] / size.height

        zoom_mat = fitz.Matrix(mat, mat)
        pix = page.get_pixmap(matrix=zoom_mat, alpha=False)
        if not self.mode:
            pix.invert_irect()
        return pix.tobytes(), pix.width, pix.height

    def show_search_pages(self):
        """
        Set current page to the page number where text found
        :return: None
        """
        self.current_page = self.text_found_pages[0]

    def update_image(self):
        """
        Update the current page
        :return: None
        """
        img = self.image_data
        self.win["-IMAGE-"](data=img[0], size=(img[1], img[2]))
        if img[1] != self.perv_img_size[0] or img[2] != self.perv_img_size[1]:
            self.win['-PAGE-CLM-'].set_size((img[1], img[2]))

    def show_popup(self, text):
        """
        Create a popup
        :param text: Content of the popup
        :return: Popup
        """
        sg.popup(text,
                 background_color='lightgrey',
                 font="He 16 bold",
                 keep_on_top=True,
                 text_color='black',
                 grab_anywhere=True,
                 icon=ERROR
                 )

    def update_cur_page(self, value=0):
        """
        Update the current page number
        :param value: Integer value to add to current page
        :return: None
        """
        if self.current_page < self.total_pages:
            self.current_page += value
        else:
            self.current_page = self.total_pages - 1
        pno = self.current_page + 1
        self.win["-PAGE_NUMBER-"](str(pno))
        #self.win['-NOTE_PAGENUMBER-']('Page # ' + str(pno))
        # try:
        #     page_note = self.notes[pno]
        # except KeyError as error:
        #     page_note = ''
        # #lf.win['-NOTE_TEXT-'](value=page_note)

    def update_match_status(self, total=None):
        """
        Update the matching page number
        :param total: Total number of matches
        :return: None
        """
        if not total:
            total = self.win['-MATCH_NUM_STATUS-'].get().split('/')[1]
        self.win['-MATCH_NUM_STATUS-'](value="{}/{}".format(annot_indexes[2], total))

    def remove_annotations(self):
        """
        If user stop searching then this function is called, it remove annotation from the whole document
        :return: None
        """
        global annot_indexes
        self.annotated_pages = []
        self.page = [None] * self.total_pages
        self.document = fitz.open(self.filename)
        self.image_data = self.get_page_data(self.current_page)
        self.update_image()
        annot_indexes = [-1, -1, 0]

    def search_text(self, text, window):
        """
        Search given text in the document
        :param text: Search text
        :param window: Multithreading is used, thus we need to given the reference of the window
        :return:
        """
        total_matches = 0
        for page in self.document:
            insert_page = True
            words = page.get_text_words()
            if words:
                for word in words:
                    if self.custom_search_option == 'simple':
                        found = text in word[4]
                    elif self.custom_search_option == 'complete':
                        found = text.lower() == word[4].lower()
                    elif self.custom_search_option == 'case':
                        found = word[4].find(text)
                    elif self.custom_search_option == 'case_complete':
                        found = text == word[4]
                    if found:
                        if insert_page:
                            self.annotated_pages.append(page)
                            insert_page = False
                        total_matches += 1
                        area = fitz.Rect(word[:4])
                        self.annotated_pages[-1].add_highlight_annot(area)
        self.update_match_status(total_matches)
        window.write_event_value('-THREAD_DONE-', total_matches)

    def stop_search(self):
        """
        Stop searching mode and resets all components
        :return: None
        """
        self.win['-MATCH_NUM_STATUS-'](value='0 / 0')
        self.win['-FIND_TEXT-'](value='')
        annot_indexes, self.text_found_pages = 0, [-1, -1, 0]
        self.searching = False
        self.remove_annotations()
        self.win['-BTN_SEARCH-'](image_data=SEARCH)

    def start_search(self):
        """
        Start searching for the given text
        :return: None
        """
        search_key = self.win['-FIND_TEXT-'].get()
        if search_key:
            self.remove_annotations()
            self.win['-BTN_SEARCH-'](image_data=WAIT if self.mode else WAIT_N, image_size=(28, 29))
            self.searching = True
            Thread(target=self.search_text, args=(search_key, self.win), daemon=True).start()

    def search_thread_done(self, match):
        """
        Searching is done using multi-threading so that GUI don't become unresponsive.
        This function tells the main window that I am done searching
        :param match: Wheather match found or not
        :return:
        """
        if match:
            self.update_match_status()
            self.search_down()
        else:
            message = "No match found."
            self.show_popup(message)
            self.stop_search()

    def update_cur_annotation(self, perv_annot, cur_annot):
        """
        Current search on the page changes its color to blue, to give better user experience.
        Well this function implements this feature
        :param perv_annot: Reference to the previous annotation
        :param cur_annot:Reference to the previous annotation
        :return: None
        """
        blue = (0.6784313725490196, 0.8470588235294118, 0.9019607843137255)
        cur_annot.set_colors(stroke=blue)
        cur_annot.update()
        if perv_annot and perv_annot.xref != cur_annot.xref:
            yellow = (1, 1, 0)
            perv_annot.set_colors(stroke=yellow)
            perv_annot.update()

    def search_up(self):
        """
        Take user to previous search text
        :return: None
        """
        #self.save_note()
        if annot_indexes[2] - 1 > 0 and self.annotated_pages and annot_indexes[0] + 1 > 0:
            annot_indexes[1] -= 1
            page = self.annotated_pages[annot_indexes[0]]
            annotations = list(page.annots())
            if annot_indexes[1] < 0:
                annot_indexes[1] = 0
                annot_indexes[0] -= 1
                page = self.annotated_pages[annot_indexes[0]]
                annotations = list(page.annots())
                annot_indexes[2] -= len(annotations) - 1
            else:
                annot_indexes[2] -= 1
            try:
                prev_annotation = annotations[annot_indexes[1] + 1]
            except IndexError as error:
                prev_annotation = None
            self.update_cur_annotation(
                prev_annotation, annotations[annot_indexes[1]])
            annot_indexes[2] -= 1
            self.current_page = page.number
            self.update_cur_page()
            self.update_match_status()
            self.image_data = self.get_page_data(annot_indexes[0], annotation=True)
            self.update_image()

    def search_down(self):
        """
        Take user to next search text
        :return: None
        """
        #self.save_note()
        if self.annotated_pages and len(self.annotated_pages) > annot_indexes[0] + 1:
            if annot_indexes[0] == -1:
                annot_indexes[0] += 1
            annot_indexes[1] += 1
            page = self.annotated_pages[annot_indexes[0]]
            annotations = list(page.annots())
            if annot_indexes[1] >= len(annotations):
                annot_indexes[1] = 0
                annot_indexes[0] += 1
                page = self.annotated_pages[annot_indexes[0]]
                annotations = list(page.annots())
            try:
                prev_annotation = annotations[annot_indexes[1] - 1]
            except IndexError as error:
                prev_annotation = None
            self.update_cur_annotation(prev_annotation, annotations[annot_indexes[1]])
            annot_indexes[2] += 1
            self.current_page = page.number
            self.update_cur_page()
            self.update_match_status()
            self.image_data = self.get_page_data(annot_indexes[0], annotation=True)
            self.update_image()
        elif self.annotated_pages and len(self.annotated_pages) <= annot_indexes[0] + 1:
            self.show_popup("Search ended.")

    def update_custom_search(self, change_index):
        """
        Update the custom search drop down
        :param change_index: Index of the content to be changed
        :return:
        """
        search_options = self.win['-BTN_DOTS-'].MenuDefinition
        if '✔' in search_options[1][change_index]:
            search_options[1][change_index] = search_options[1][change_index][3:]
        else:
            search_options[1][change_index] = '✔  ' + search_options[1][change_index]
        self.win['-BTN_DOTS-'](search_options)
        self.update_custom_search_option()

    def update_custom_search_option(self):
        """
        Update the custom search drop down custom
        :return: None
        """
        search_list = self.win['-BTN_DOTS-'].MenuDefinition
        if '✔' in search_list[1][0]:
            if '✔' in search_list[1][1]:
                self.custom_search_option = 'case_complete'
            else:
                self.custom_search_option = 'complete'
        elif '✔' in search_list[1][1]:
            self.custom_search_option = 'case'
        else:
            self.custom_search_option = 'simple'

    def reset_controls(self):
        self.win['-BTN_PREVIOUS-'](disabled=False)

    def act_on_next_page(self):
        """
        When user clicks to go to next page
        :return: Whether page is updated
        """
        if not self.current_page == (self.total_pages - 1):
            #self.save_note()
            self.update_cur_page(1)
            return True

    def act_on_previous_page(self):
        """
        When user clicks to go to previous page
        :return: Whether page is updated
        """
        if self.current_page > 0:
            #self.save_note()
            self.update_cur_page(-1)
            return True

    def save_note(self):
        """
        Save the note, associating it with current page
        :return: None
        """
        pass
        # note = self.win['-NOTE_TEXT-'].get()
        # if self.win['-SAVE_NOTE-'].get() and note:
        #     self.notes[int(self.win["-PAGE_NUMBER-"].get())] = note

    def save_notes_to_file(self):
        """
        Save all note to a text file
        :return: None
        """
        pass
        #elf.save_note()
        # with open(self.filename.split('/')[-1].split('.')[0] + '_notes.txt', 'w', encoding="utf-8") as note_file:
        #     note_file.write('\t\Do not edit this file\n\n')
        #     for page, note in self.notes.items():
        #         if note and note.split():
        #             underline = ''.join(['=' for _ in range(len(str(page)) + 1)])
        #             note_file.write("{}\n{}\n{}\n".format(page, underline, note))

    def load_notes(self):
        """
        Load note form text file
        :return: None
        """
        try:
            with open(self.filename.split('/')[-1].split('.')[0] + '_notes.txt', 'r', encoding="utf-8") as note_file:
                count = 21
                for line in note_file:
                    try:
                        page_number = int(line)
                        count = 2
                    except ValueError as ex:
                        count -= 1
                    if not count:
                        self.notes[page_number] = line
        except Exception as e:
            pass

    def close_popup(self, text=None):
        """
        Confirms user before closing a file
        :text: Test to display
        :return: None
        """
        if not text:
            text = 'Do you really want to close this file?'
        return sg.popup_yes_no(text,
                               text_color='black',
                               background_color='lightgrey',
                               line_width=40,
                               font='Helvetica 15 bold',
                               icon=QUESTION,
                               keep_on_top=True,
                               non_blocking=False
                               )

    def unselect_TOC(self):
        """
        Set focus away from table of contents, otherwise clicking down/up key will take you next/previous heading
        :return: None
        """
        self.win['-FRAME_MAIN-'].set_focus(force=True)

    def change_width(self):
        """
        Change width of te page
        :return: None
        """
        self.full_width = not self.full_width
        if self.full_width:
            image = ORG_WIDTH if self.mode else ORG_WIDTH_N
            val = '150'
            tooltip = 'Original width'
        else:
            val = '100'
            image = FULL_SCREEN if self.mode else FULL_SCREEN_N
            tooltip = 'Fill to width'

        self.win['-ZOOM_VAL-'](val)
        self.win['-BTN_WIDTH-'](image_data=image, image_size=(32, 32))
        self.image_data = self.get_page_data(self.current_page)
        self.win['-BTN_WIDTH-'].set_tooltip(tooltip)
        self.update_image()

    def update_mode(self):
        """
        Update current mode of application, day/night mode
        :return: None
        """
        self.mode = not self.mode
        mode = NIGHT if self.mode else DAY
        self.win['-BTN_MODE-'](image_data=mode)
        self.win.close()
        self.win = self.create_reader_gui()

    def run(self):
        """
        Runs the whole application, inside a infinite loop unless user chooses to exit.
        This loop listens for event and act upon them accordingly.
        :return: None
        """
        while True:
            try:
                evt, value = self.win.Read()
                if not evt:
                    break
                event = self.Event(evt)
                if event.quit():
                    if self.close_popup("Do you want to close the PDF Viewer?") == 'Yes':
                        #self.save_notes_to_file()
                        self.win.close()
                        break
                change_page = False

                if event.scroll_start():
                    self.scroll_page = True
                elif event.scroll_stop():
                    self.scroll_page = False
                elif event.open_file():
                    new_file = PDFViewer.get_filename()
                    if new_file:
                        if os.path.isfile(new_file):
                            if self.filename:
                                #self.save_notes_to_file()
                                self.clear_window()
                            self.filename = new_file
                            self.fill_window()
                        else:
                            self.show_popup('No file found')
                elif event.about():
                    self.show_popup('PDFViewer V0.0.1')
                elif event.custom_search():
                    if 'Case sensitive' in value['-BTN_DOTS-']:
                        self.update_custom_search(1)
                    elif 'Whole word' in value['-BTN_DOTS-']:
                        self.update_custom_search(0)

                if self.filename:
                    if event.enter():
                        elem = self.win.find_element_with_focus()
                        if elem == self.win['-PAGE_NUMBER-']:
                            try:
                                page = int(value["-PAGE_NUMBER-"])
                                if self.total_pages >= page > 0:
                                    self.current_page = page - 1
                                    self.save_note()
                                    change_page = True
                                else:
                                    raise Exception()
                            except Exception as error:
                                self.show_popup("There is no such page number in this document.")
                            self.update_cur_page()
                        elif elem == self.win['-FIND_TEXT-']:
                            if self.searching:
                                self.search_down()
                            else:
                                self.start_search()
                        elif elem == self.win['-ZOOM_VAL-']:
                            change_page = True
                    elif event.toc():
                        try:
                            self.current_page = self.TOC_tree.tree_dict[value['-TOC_TREE-'][0]].values
                        except IndexError as error:
                            pass
                        self.save_note()
                        self.update_cur_page(-1)
                        change_page = True

                    # elif event.mouse_next():
                    #     if self.scroll_page:
                    #         change_page = self.act_on_next_page()
                    elif event.page_down():
                        change_page = self.act_on_next_page()
                    elif event.down_arrow_key():
                        change_page = self.act_on_next_page()
                    elif event.right_arrow_key():
                        change_page = self.act_on_next_page()

                    # elif event.mouse_prior():
                    #     if self.scroll_page:
                    #         change_page = self.act_on_previous_page()
                    elif event.page_up():
                        change_page = self.act_on_previous_page()
                    elif event.up_arrow_key():
                        change_page = self.act_on_previous_page()
                    elif event.left_arrow_key():
                        change_page = self.act_on_previous_page()

                    elif event.first_page():
                        self.save_note()
                        self.current_page = 0
                        self.update_cur_page()
                        change_page = True
                    elif event.last_page():
                        self.save_note()
                        change_page = self.current_page = self.total_pages - 1
                        self.update_cur_page()

                    # Search events
                    elif event.search():
                        if self.searching:
                            self.stop_search()
                        else:
                            self.start_search()
                    elif event.down_search():
                        if self.searching:
                            self.search_down()
                    elif event.up_search():
                        if self.searching:
                            self.search_up()

                    elif event.thread_done():
                        self.win['-BTN_SEARCH-'](image_data=STOP if self.mode else STOP_N, image_size=(15, 15))
                        self.search_thread_done(value['-THREAD_DONE-'])

                    elif event.zoom():
                        change_page = True
                    elif event.change_width():
                        self.change_width()
                    elif event.close_file():
                        if self.close_popup() == 'Yes':
                            #self.save_notes_to_file()
                            self.clear_window()
                    elif event.mode():
                        self.update_mode()
                        change_page = True

                    if change_page:
                        self.unselect_TOC()
                        self.image_data = self.get_page_data(self.current_page)
                        self.update_image()
            except Exception as ex:
                print(ex)
                break
        self.win.close()

    class Event:
        """
        Inner class that handles events
        """

        def __init__(self, event):
            self.event = event

        def toc(self):
            return self.event == '-TOC_TREE-'

        def cb_search(self):
            return self.event.startswith('-SEARCH_CB-')

        def first_page(self):
            return self.event == '-BTN_FIRST_PAGE-'

        def last_page(self):
            return self.event == '-BTN_LAST_PAGE-'

        def enter(self):
            return self.event.startswith("Return:") or self.event == chr(13)

        def quit(self):
            return self.event in (chr(27), 'Close') or self.event.startswith("Escape:")

        def mouse_next(self):
            return self.event == "MouseWheel:Down"

        def mouse_prior(self):
            return self.event == "-BTN_PREVIOUS-" or self.event == "MouseWheel:Up"

        def up_arrow_key(self):
            return self.event.startswith("Up:")

        def down_arrow_key(self):
            return self.event.startswith("Down:")

        def left_arrow_key(self):
            return False and self.event.startswith("Left:")

        def right_arrow_key(self):
            return False and self.event.startswith("Right:")

        def zoom(self):
            return self.event == "-BTN_ZOOM_ICON-"

        def search(self):
            return self.event == '-BTN_SEARCH-'

        def thread_done(self):
            return self.event == '-THREAD_DONE-'

        def down_search(self):
            return self.event == '-BTN_DOWN_SEARCH-'

        def up_search(self):
            return self.event == '-BTN_UP_SEARCH-'

        def page_down(self):
            return self.event == "-BTN_NEXT-"

        def page_up(self):
            return self.event == "-BTN_PREVIOUS-"

        def is_MyKeys(self):
            return any((self.enter(), self.mouse_next(), self.mouse_prior(), self.zoom()))

        def open_file(self):
            return self.event in ('-BTN_OPEN_FILE-', 'Open')

        def close_file(self):
            return self.event == '-BTN_CLOSE_FILE-'

        def scroll_start(self):
            return self.event == '-FRAME_MAIN-START-'

        def scroll_stop(self):
            return self.event == '-FRAME_MAIN-STOP-'

        def custom_search(self):
            return self.event == '-BTN_DOTS-'

        def about(self):
            return self.event == 'About'

        def change_width(self):
            return self.event == '-BTN_WIDTH-'

        def zoom_spinner(self):
            return self.event == '-ZOOM_VAL-'

        def mode(self):
            return self.event == '-BTN_MODE-'

        def __str__(self):
            return self.event


if __name__ == '__main__':
    viewer = PDFViewer()
    viewer.run()
